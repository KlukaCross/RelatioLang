# Generated from RelatioLangParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,139,1243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,5,0,154,8,0,10,0,12,0,
        157,9,0,1,0,1,0,1,1,5,1,162,8,1,10,1,12,1,165,9,1,1,1,1,1,4,1,169,
        8,1,11,1,12,1,170,1,1,5,1,174,8,1,10,1,12,1,177,9,1,1,1,5,1,180,
        8,1,10,1,12,1,183,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,195,8,2,1,3,3,3,198,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,207,8,
        4,10,4,12,4,210,9,4,1,4,1,4,3,4,214,8,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,3,5,227,8,5,1,5,1,5,1,5,3,5,232,8,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,3,5,241,8,5,1,5,1,5,1,5,5,5,246,8,5,10,5,12,
        5,249,9,5,1,5,3,5,252,8,5,1,5,1,5,3,5,256,8,5,1,5,3,5,259,8,5,1,
        5,1,5,1,5,1,5,5,5,265,8,5,10,5,12,5,268,9,5,1,5,1,5,1,5,3,5,273,
        8,5,1,5,3,5,276,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,284,8,5,1,5,1,5,
        1,5,1,5,1,5,4,5,291,8,5,11,5,12,5,292,1,5,1,5,3,5,297,8,5,1,5,1,
        5,3,5,301,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,328,8,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,336,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,348,8,5,1,5,1,5,1,5,3,5,353,8,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,365,8,5,1,5,1,5,1,5,1,5,3,5,371,8,5,1,
        5,1,5,1,5,1,5,1,5,3,5,378,8,5,1,5,1,5,3,5,382,8,5,1,5,1,5,1,5,1,
        5,1,5,1,5,5,5,390,8,5,10,5,12,5,393,9,5,3,5,395,8,5,1,5,1,5,1,5,
        1,5,3,5,401,8,5,1,5,1,5,1,5,1,5,3,5,407,8,5,1,5,1,5,1,5,1,5,1,5,
        5,5,414,8,5,10,5,12,5,417,9,5,3,5,419,8,5,1,5,1,5,3,5,423,8,5,5,
        5,425,8,5,10,5,12,5,428,9,5,1,6,1,6,1,7,1,7,1,7,1,7,5,7,436,8,7,
        10,7,12,7,439,9,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,447,8,8,10,8,12,8,
        450,9,8,1,9,1,9,1,9,1,9,1,9,3,9,457,8,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,3,12,482,8,12,1,13,1,13,1,13,1,13,1,13,
        3,13,489,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        5,16,514,8,16,10,16,12,16,517,9,16,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,525,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,
        536,8,17,10,17,12,17,539,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,5,18,552,8,18,10,18,12,18,555,9,18,1,19,3,19,
        558,8,19,1,19,1,19,1,19,1,19,5,19,564,8,19,10,19,12,19,567,9,19,
        1,19,3,19,570,8,19,1,19,3,19,573,8,19,1,20,1,20,1,20,1,20,3,20,579,
        8,20,5,20,581,8,20,10,20,12,20,584,9,20,1,21,1,21,3,21,588,8,21,
        1,21,1,21,1,21,5,21,593,8,21,10,21,12,21,596,9,21,1,21,1,21,1,21,
        1,21,5,21,602,8,21,10,21,12,21,605,9,21,1,21,3,21,608,8,21,3,21,
        610,8,21,1,21,1,21,3,21,614,8,21,1,21,1,21,1,21,1,21,1,21,5,21,621,
        8,21,10,21,12,21,624,9,21,1,21,1,21,3,21,628,8,21,3,21,630,8,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,641,8,21,10,21,
        12,21,644,9,21,3,21,646,8,21,1,21,3,21,649,8,21,1,22,3,22,652,8,
        22,1,22,1,22,3,22,656,8,22,1,22,3,22,659,8,22,1,23,3,23,662,8,23,
        1,23,1,23,1,23,3,23,667,8,23,1,23,1,23,3,23,671,8,23,1,23,4,23,674,
        8,23,11,23,12,23,675,1,23,3,23,679,8,23,1,23,3,23,682,8,23,1,24,
        1,24,1,24,3,24,687,8,24,1,24,1,24,3,24,691,8,24,1,24,3,24,694,8,
        24,1,24,1,24,1,24,1,24,1,24,3,24,701,8,24,1,24,1,24,1,24,3,24,706,
        8,24,1,24,1,24,1,24,1,24,1,24,5,24,713,8,24,10,24,12,24,716,9,24,
        1,24,1,24,3,24,720,8,24,1,24,3,24,723,8,24,1,24,1,24,1,24,1,24,5,
        24,729,8,24,10,24,12,24,732,9,24,1,24,3,24,735,8,24,1,24,1,24,1,
        24,1,24,1,24,1,24,3,24,743,8,24,1,24,3,24,746,8,24,3,24,748,8,24,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,757,8,25,1,25,3,25,760,8,
        25,3,25,762,8,25,1,26,1,26,3,26,766,8,26,1,26,1,26,3,26,770,8,26,
        1,26,1,26,3,26,774,8,26,1,26,3,26,777,8,26,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,5,27,786,8,27,10,27,12,27,789,9,27,1,27,1,27,3,27,793,
        8,27,1,28,1,28,3,28,797,8,28,1,28,1,28,3,28,801,8,28,1,29,1,29,1,
        29,1,29,5,29,807,8,29,10,29,12,29,810,9,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,31,1,31,3,31,822,8,31,1,31,1,31,1,31,1,31,1,
        31,5,31,829,8,31,10,31,12,31,832,9,31,3,31,834,8,31,1,31,1,31,1,
        31,1,31,1,31,5,31,841,8,31,10,31,12,31,844,9,31,1,31,3,31,847,8,
        31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,855,8,32,1,32,1,32,1,32,1,
        32,1,32,5,32,862,8,32,10,32,12,32,865,9,32,3,32,867,8,32,1,32,1,
        32,1,32,1,32,1,32,5,32,874,8,32,10,32,12,32,877,9,32,3,32,879,8,
        32,1,32,3,32,882,8,32,1,32,3,32,885,8,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,895,8,33,3,33,897,8,33,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,3,34,906,8,34,1,35,1,35,1,35,1,35,1,35,5,35,913,8,35,
        10,35,12,35,916,9,35,1,35,3,35,919,8,35,1,35,1,35,1,36,1,36,1,36,
        3,36,926,8,36,1,36,1,36,1,36,5,36,931,8,36,10,36,12,36,934,9,36,
        1,36,3,36,937,8,36,1,36,1,36,3,36,941,8,36,1,37,1,37,1,37,1,37,1,
        37,5,37,948,8,37,10,37,12,37,951,9,37,1,37,3,37,954,8,37,1,37,1,
        37,3,37,958,8,37,1,37,1,37,1,37,3,37,963,8,37,1,38,1,38,3,38,967,
        8,38,1,38,1,38,1,38,5,38,972,8,38,10,38,12,38,975,9,38,1,39,1,39,
        1,39,1,39,1,39,5,39,982,8,39,10,39,12,39,985,9,39,1,40,1,40,1,40,
        1,40,3,40,991,8,40,1,41,1,41,1,41,3,41,996,8,41,1,41,3,41,999,8,
        41,1,41,1,41,3,41,1003,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,3,43,1017,8,43,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,3,44,1029,8,44,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,3,45,1038,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1047,
        8,46,1,46,1,46,3,46,1051,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,3,46,1061,8,46,1,46,3,46,1064,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,3,46,1073,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        1082,8,46,1,46,3,46,1085,8,46,1,46,1,46,1,46,1,46,3,46,1091,8,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        1105,8,46,1,46,1,46,3,46,1109,8,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,3,46,1120,8,46,1,46,1,46,1,46,3,46,1125,8,46,1,47,
        1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,4,49,1136,8,49,11,49,12,
        49,1137,1,50,1,50,1,50,4,50,1143,8,50,11,50,12,50,1144,1,51,1,51,
        1,51,1,51,1,52,1,52,3,52,1153,8,52,1,52,1,52,1,52,3,52,1158,8,52,
        5,52,1160,8,52,10,52,12,52,1163,9,52,1,53,1,53,1,54,1,54,1,55,1,
        55,1,55,1,55,1,55,5,55,1174,8,55,10,55,12,55,1177,9,55,1,55,1,55,
        3,55,1181,8,55,1,56,1,56,1,56,1,56,5,56,1187,8,56,10,56,12,56,1190,
        9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,
        1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,
        1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,
        1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1241,
        8,75,1,75,0,1,10,76,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,0,19,1,0,8,9,2,0,7,7,12,13,1,0,14,17,1,0,18,21,3,0,51,51,
        63,63,65,65,5,0,39,41,70,70,106,107,131,132,134,135,2,0,30,30,43,
        43,3,0,50,50,62,62,76,76,3,0,79,79,91,91,113,113,2,0,5,5,71,71,1,
        0,110,111,2,0,33,33,42,42,2,0,88,88,99,99,2,0,96,96,103,103,2,0,
        97,97,104,105,2,0,98,98,100,100,2,0,8,10,68,68,2,0,130,130,134,134,
        3,0,30,114,117,123,125,129,1386,0,155,1,0,0,0,2,163,1,0,0,0,4,194,
        1,0,0,0,6,197,1,0,0,0,8,201,1,0,0,0,10,300,1,0,0,0,12,429,1,0,0,
        0,14,431,1,0,0,0,16,442,1,0,0,0,18,451,1,0,0,0,20,458,1,0,0,0,22,
        467,1,0,0,0,24,476,1,0,0,0,26,483,1,0,0,0,28,490,1,0,0,0,30,496,
        1,0,0,0,32,502,1,0,0,0,34,518,1,0,0,0,36,540,1,0,0,0,38,557,1,0,
        0,0,40,574,1,0,0,0,42,648,1,0,0,0,44,651,1,0,0,0,46,661,1,0,0,0,
        48,747,1,0,0,0,50,761,1,0,0,0,52,776,1,0,0,0,54,792,1,0,0,0,56,800,
        1,0,0,0,58,802,1,0,0,0,60,813,1,0,0,0,62,819,1,0,0,0,64,850,1,0,
        0,0,66,886,1,0,0,0,68,898,1,0,0,0,70,907,1,0,0,0,72,922,1,0,0,0,
        74,942,1,0,0,0,76,964,1,0,0,0,78,976,1,0,0,0,80,986,1,0,0,0,82,992,
        1,0,0,0,84,1004,1,0,0,0,86,1016,1,0,0,0,88,1028,1,0,0,0,90,1037,
        1,0,0,0,92,1124,1,0,0,0,94,1126,1,0,0,0,96,1129,1,0,0,0,98,1132,
        1,0,0,0,100,1139,1,0,0,0,102,1146,1,0,0,0,104,1150,1,0,0,0,106,1164,
        1,0,0,0,108,1166,1,0,0,0,110,1168,1,0,0,0,112,1182,1,0,0,0,114,1193,
        1,0,0,0,116,1199,1,0,0,0,118,1201,1,0,0,0,120,1203,1,0,0,0,122,1205,
        1,0,0,0,124,1207,1,0,0,0,126,1209,1,0,0,0,128,1211,1,0,0,0,130,1213,
        1,0,0,0,132,1215,1,0,0,0,134,1217,1,0,0,0,136,1219,1,0,0,0,138,1221,
        1,0,0,0,140,1223,1,0,0,0,142,1225,1,0,0,0,144,1227,1,0,0,0,146,1229,
        1,0,0,0,148,1231,1,0,0,0,150,1240,1,0,0,0,152,154,3,2,1,0,153,152,
        1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,
        1,0,0,0,157,155,1,0,0,0,158,159,5,0,0,1,159,1,1,0,0,0,160,162,5,
        1,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,
        0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,175,3,4,2,0,167,169,5,
        1,0,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,
        0,0,0,171,172,1,0,0,0,172,174,3,4,2,0,173,168,1,0,0,0,174,177,1,
        0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,181,1,0,0,0,177,175,1,
        0,0,0,178,180,5,1,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,
        0,0,0,181,182,1,0,0,0,182,3,1,0,0,0,183,181,1,0,0,0,184,195,3,18,
        9,0,185,195,3,20,10,0,186,195,3,22,11,0,187,195,3,24,12,0,188,195,
        3,26,13,0,189,195,3,28,14,0,190,195,3,30,15,0,191,195,3,32,16,0,
        192,195,3,34,17,0,193,195,3,36,18,0,194,184,1,0,0,0,194,185,1,0,
        0,0,194,186,1,0,0,0,194,187,1,0,0,0,194,188,1,0,0,0,194,189,1,0,
        0,0,194,190,1,0,0,0,194,191,1,0,0,0,194,192,1,0,0,0,194,193,1,0,
        0,0,195,5,1,0,0,0,196,198,7,0,0,0,197,196,1,0,0,0,197,198,1,0,0,
        0,198,199,1,0,0,0,199,200,5,132,0,0,200,7,1,0,0,0,201,213,3,124,
        62,0,202,203,5,3,0,0,203,208,3,126,63,0,204,205,5,5,0,0,205,207,
        3,126,63,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,
        1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,5,4,0,0,212,214,
        1,0,0,0,213,202,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,
        5,32,0,0,216,217,5,3,0,0,217,218,3,38,19,0,218,219,5,4,0,0,219,9,
        1,0,0,0,220,221,6,5,-1,0,221,301,3,12,6,0,222,301,5,133,0,0,223,
        224,3,122,61,0,224,225,5,2,0,0,225,227,1,0,0,0,226,223,1,0,0,0,226,
        227,1,0,0,0,227,228,1,0,0,0,228,229,3,124,62,0,229,230,5,2,0,0,230,
        232,1,0,0,0,231,226,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,
        301,3,126,63,0,234,235,3,106,53,0,235,236,3,10,5,19,236,301,1,0,
        0,0,237,238,3,120,60,0,238,251,5,3,0,0,239,241,5,43,0,0,240,239,
        1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,247,3,10,5,0,243,244,
        5,5,0,0,244,246,3,10,5,0,245,243,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,252,1,0,0,0,249,247,1,0,0,0,250,252,
        5,7,0,0,251,240,1,0,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,
        1,0,0,0,253,255,5,4,0,0,254,256,3,60,30,0,255,254,1,0,0,0,255,256,
        1,0,0,0,256,258,1,0,0,0,257,259,3,64,32,0,258,257,1,0,0,0,258,259,
        1,0,0,0,259,301,1,0,0,0,260,261,5,3,0,0,261,266,3,10,5,0,262,263,
        5,5,0,0,263,265,3,10,5,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,
        1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,
        5,4,0,0,270,301,1,0,0,0,271,273,5,68,0,0,272,271,1,0,0,0,272,273,
        1,0,0,0,273,274,1,0,0,0,274,276,5,48,0,0,275,272,1,0,0,0,275,276,
        1,0,0,0,276,277,1,0,0,0,277,278,5,3,0,0,278,279,3,38,19,0,279,280,
        5,4,0,0,280,301,1,0,0,0,281,283,5,36,0,0,282,284,3,10,5,0,283,282,
        1,0,0,0,283,284,1,0,0,0,284,290,1,0,0,0,285,286,5,85,0,0,286,287,
        3,10,5,0,287,288,5,81,0,0,288,289,3,10,5,0,289,291,1,0,0,0,290,285,
        1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,296,
        1,0,0,0,294,295,5,44,0,0,295,297,3,10,5,0,296,294,1,0,0,0,296,297,
        1,0,0,0,297,298,1,0,0,0,298,299,5,45,0,0,299,301,1,0,0,0,300,220,
        1,0,0,0,300,222,1,0,0,0,300,231,1,0,0,0,300,234,1,0,0,0,300,237,
        1,0,0,0,300,260,1,0,0,0,300,275,1,0,0,0,300,281,1,0,0,0,301,426,
        1,0,0,0,302,303,10,18,0,0,303,304,5,11,0,0,304,425,3,10,5,19,305,
        306,10,17,0,0,306,307,7,1,0,0,307,425,3,10,5,18,308,309,10,16,0,
        0,309,310,7,0,0,0,310,425,3,10,5,17,311,312,10,15,0,0,312,313,7,
        2,0,0,313,425,3,10,5,16,314,315,10,14,0,0,315,316,7,3,0,0,316,425,
        3,10,5,15,317,335,10,13,0,0,318,336,5,6,0,0,319,336,5,22,0,0,320,
        336,5,23,0,0,321,336,5,24,0,0,322,336,5,59,0,0,323,324,5,59,0,0,
        324,336,5,68,0,0,325,327,5,59,0,0,326,328,5,68,0,0,327,326,1,0,0,
        0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,5,43,0,0,330,336,5,49,
        0,0,331,336,5,55,0,0,332,336,5,63,0,0,333,336,5,51,0,0,334,336,5,
        65,0,0,335,318,1,0,0,0,335,319,1,0,0,0,335,320,1,0,0,0,335,321,1,
        0,0,0,335,322,1,0,0,0,335,323,1,0,0,0,335,325,1,0,0,0,335,331,1,
        0,0,0,335,332,1,0,0,0,335,333,1,0,0,0,335,334,1,0,0,0,336,337,1,
        0,0,0,337,425,3,10,5,14,338,339,10,12,0,0,339,340,5,31,0,0,340,425,
        3,10,5,13,341,342,10,11,0,0,342,343,5,73,0,0,343,425,3,10,5,12,344,
        345,10,5,0,0,345,347,5,59,0,0,346,348,5,68,0,0,347,346,1,0,0,0,347,
        348,1,0,0,0,348,349,1,0,0,0,349,425,3,10,5,6,350,352,10,4,0,0,351,
        353,5,68,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,
        355,5,34,0,0,355,356,3,10,5,0,356,357,5,31,0,0,357,358,3,10,5,5,
        358,425,1,0,0,0,359,360,10,8,0,0,360,361,5,37,0,0,361,425,3,128,
        64,0,362,364,10,7,0,0,363,365,5,68,0,0,364,363,1,0,0,0,364,365,1,
        0,0,0,365,366,1,0,0,0,366,367,7,4,0,0,367,370,3,10,5,0,368,369,5,
        46,0,0,369,371,3,10,5,0,370,368,1,0,0,0,370,371,1,0,0,0,371,425,
        1,0,0,0,372,377,10,6,0,0,373,378,5,60,0,0,374,378,5,69,0,0,375,376,
        5,68,0,0,376,378,5,70,0,0,377,373,1,0,0,0,377,374,1,0,0,0,377,375,
        1,0,0,0,378,425,1,0,0,0,379,381,10,3,0,0,380,382,5,68,0,0,381,380,
        1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,422,5,55,0,0,384,394,
        5,3,0,0,385,395,3,38,19,0,386,391,3,10,5,0,387,388,5,5,0,0,388,390,
        3,10,5,0,389,387,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
        1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,394,385,1,0,0,0,394,386,
        1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,423,5,4,0,0,397,398,
        3,122,61,0,398,399,5,2,0,0,399,401,1,0,0,0,400,397,1,0,0,0,400,401,
        1,0,0,0,401,402,1,0,0,0,402,423,3,124,62,0,403,404,3,122,61,0,404,
        405,5,2,0,0,405,407,1,0,0,0,406,403,1,0,0,0,406,407,1,0,0,0,407,
        408,1,0,0,0,408,409,3,148,74,0,409,418,5,3,0,0,410,415,3,10,5,0,
        411,412,5,5,0,0,412,414,3,10,5,0,413,411,1,0,0,0,414,417,1,0,0,0,
        415,413,1,0,0,0,415,416,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,
        418,410,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,5,4,0,0,
        421,423,1,0,0,0,422,384,1,0,0,0,422,400,1,0,0,0,422,406,1,0,0,0,
        423,425,1,0,0,0,424,302,1,0,0,0,424,305,1,0,0,0,424,308,1,0,0,0,
        424,311,1,0,0,0,424,314,1,0,0,0,424,317,1,0,0,0,424,338,1,0,0,0,
        424,341,1,0,0,0,424,344,1,0,0,0,424,350,1,0,0,0,424,359,1,0,0,0,
        424,362,1,0,0,0,424,372,1,0,0,0,424,379,1,0,0,0,425,428,1,0,0,0,
        426,424,1,0,0,0,426,427,1,0,0,0,427,11,1,0,0,0,428,426,1,0,0,0,429,
        430,7,5,0,0,430,13,1,0,0,0,431,432,5,3,0,0,432,437,3,10,5,0,433,
        434,5,5,0,0,434,436,3,10,5,0,435,433,1,0,0,0,436,439,1,0,0,0,437,
        435,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,437,1,0,0,0,440,
        441,5,4,0,0,441,15,1,0,0,0,442,443,5,84,0,0,443,448,3,14,7,0,444,
        445,5,5,0,0,445,447,3,14,7,0,446,444,1,0,0,0,447,450,1,0,0,0,448,
        446,1,0,0,0,448,449,1,0,0,0,449,17,1,0,0,0,450,448,1,0,0,0,451,452,
        5,117,0,0,452,453,5,118,0,0,453,456,3,124,62,0,454,455,5,86,0,0,
        455,457,3,10,5,0,456,454,1,0,0,0,456,457,1,0,0,0,457,19,1,0,0,0,
        458,459,5,119,0,0,459,460,5,120,0,0,460,461,3,124,62,0,461,462,5,
        2,0,0,462,463,3,126,63,0,463,464,3,124,62,0,464,465,5,2,0,0,465,
        466,3,126,63,0,466,21,1,0,0,0,467,468,5,114,0,0,468,469,5,120,0,
        0,469,470,3,124,62,0,470,471,5,2,0,0,471,472,3,126,63,0,472,473,
        3,124,62,0,473,474,5,2,0,0,474,475,3,126,63,0,475,23,1,0,0,0,476,
        477,5,67,0,0,477,478,5,121,0,0,478,481,3,124,62,0,479,480,5,86,0,
        0,480,482,3,10,5,0,481,479,1,0,0,0,481,482,1,0,0,0,482,25,1,0,0,
        0,483,484,5,67,0,0,484,485,5,122,0,0,485,488,3,124,62,0,486,487,
        5,86,0,0,487,489,3,10,5,0,488,486,1,0,0,0,488,489,1,0,0,0,489,27,
        1,0,0,0,490,491,5,64,0,0,491,492,5,123,0,0,492,493,5,131,0,0,493,
        494,5,124,0,0,494,495,3,124,62,0,495,29,1,0,0,0,496,497,5,64,0,0,
        497,498,5,125,0,0,498,499,5,131,0,0,499,500,5,124,0,0,500,501,3,
        124,62,0,501,31,1,0,0,0,502,503,5,126,0,0,503,504,3,110,55,0,504,
        505,5,124,0,0,505,506,3,124,62,0,506,507,5,2,0,0,507,515,3,126,63,
        0,508,509,5,5,0,0,509,510,3,124,62,0,510,511,5,2,0,0,511,512,3,126,
        63,0,512,514,1,0,0,0,513,508,1,0,0,0,514,517,1,0,0,0,515,513,1,0,
        0,0,515,516,1,0,0,0,516,33,1,0,0,0,517,515,1,0,0,0,518,519,5,127,
        0,0,519,520,5,128,0,0,520,524,5,84,0,0,521,525,3,112,56,0,522,525,
        3,114,57,0,523,525,3,110,55,0,524,521,1,0,0,0,524,522,1,0,0,0,524,
        523,1,0,0,0,525,526,1,0,0,0,526,527,5,124,0,0,527,528,3,124,62,0,
        528,529,5,2,0,0,529,537,3,126,63,0,530,531,5,5,0,0,531,532,3,124,
        62,0,532,533,5,2,0,0,533,534,3,126,63,0,534,536,1,0,0,0,535,530,
        1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,35,1,
        0,0,0,539,537,1,0,0,0,540,541,5,127,0,0,541,542,5,128,0,0,542,543,
        5,129,0,0,543,544,3,124,62,0,544,545,5,6,0,0,545,553,5,131,0,0,546,
        547,5,5,0,0,547,548,3,124,62,0,548,549,5,6,0,0,549,550,5,131,0,0,
        550,552,1,0,0,0,551,546,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,
        553,554,1,0,0,0,554,37,1,0,0,0,555,553,1,0,0,0,556,558,3,76,38,0,
        557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,565,3,42,21,
        0,560,561,3,56,28,0,561,562,3,42,21,0,562,564,1,0,0,0,563,560,1,
        0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,569,1,
        0,0,0,567,565,1,0,0,0,568,570,3,78,39,0,569,568,1,0,0,0,569,570,
        1,0,0,0,570,572,1,0,0,0,571,573,3,80,40,0,572,571,1,0,0,0,572,573,
        1,0,0,0,573,39,1,0,0,0,574,582,3,48,24,0,575,576,3,52,26,0,576,578,
        3,48,24,0,577,579,3,54,27,0,578,577,1,0,0,0,578,579,1,0,0,0,579,
        581,1,0,0,0,580,575,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,
        583,1,0,0,0,583,41,1,0,0,0,584,582,1,0,0,0,585,587,5,80,0,0,586,
        588,7,6,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,
        594,3,50,25,0,590,591,5,5,0,0,591,593,3,50,25,0,592,590,1,0,0,0,
        593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,609,1,0,0,0,
        596,594,1,0,0,0,597,607,5,49,0,0,598,603,3,48,24,0,599,600,5,5,0,
        0,600,602,3,48,24,0,601,599,1,0,0,0,602,605,1,0,0,0,603,601,1,0,
        0,0,603,604,1,0,0,0,604,608,1,0,0,0,605,603,1,0,0,0,606,608,3,40,
        20,0,607,598,1,0,0,0,607,606,1,0,0,0,608,610,1,0,0,0,609,597,1,0,
        0,0,609,610,1,0,0,0,610,613,1,0,0,0,611,612,5,86,0,0,612,614,3,10,
        5,0,613,611,1,0,0,0,613,614,1,0,0,0,614,629,1,0,0,0,615,616,5,52,
        0,0,616,617,5,35,0,0,617,622,3,10,5,0,618,619,5,5,0,0,619,621,3,
        10,5,0,620,618,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,
        0,0,0,623,627,1,0,0,0,624,622,1,0,0,0,625,626,5,53,0,0,626,628,3,
        10,5,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,615,1,
        0,0,0,629,630,1,0,0,0,630,645,1,0,0,0,631,632,5,108,0,0,632,633,
        3,136,68,0,633,634,5,32,0,0,634,642,3,62,31,0,635,636,5,5,0,0,636,
        637,3,136,68,0,637,638,5,32,0,0,638,639,3,62,31,0,639,641,1,0,0,
        0,640,635,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,
        0,643,646,1,0,0,0,644,642,1,0,0,0,645,631,1,0,0,0,645,646,1,0,0,
        0,646,649,1,0,0,0,647,649,3,16,8,0,648,585,1,0,0,0,648,647,1,0,0,
        0,649,43,1,0,0,0,650,652,3,76,38,0,651,650,1,0,0,0,651,652,1,0,0,
        0,652,653,1,0,0,0,653,655,3,42,21,0,654,656,3,78,39,0,655,654,1,
        0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,659,3,80,40,0,658,657,
        1,0,0,0,658,659,1,0,0,0,659,45,1,0,0,0,660,662,3,76,38,0,661,660,
        1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,673,3,42,21,0,664,666,
        5,82,0,0,665,667,5,30,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,671,
        1,0,0,0,668,671,5,58,0,0,669,671,5,47,0,0,670,664,1,0,0,0,670,668,
        1,0,0,0,670,669,1,0,0,0,671,672,1,0,0,0,672,674,3,42,21,0,673,670,
        1,0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,
        1,0,0,0,677,679,3,78,39,0,678,677,1,0,0,0,678,679,1,0,0,0,679,681,
        1,0,0,0,680,682,3,80,40,0,681,680,1,0,0,0,681,682,1,0,0,0,682,47,
        1,0,0,0,683,684,3,122,61,0,684,685,5,2,0,0,685,687,1,0,0,0,686,683,
        1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,693,3,124,62,0,689,691,
        5,32,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,
        3,132,66,0,693,690,1,0,0,0,693,694,1,0,0,0,694,700,1,0,0,0,695,696,
        5,56,0,0,696,697,5,35,0,0,697,701,3,130,65,0,698,699,5,68,0,0,699,
        701,5,56,0,0,700,695,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,
        748,1,0,0,0,702,703,3,122,61,0,703,704,5,2,0,0,704,706,1,0,0,0,705,
        702,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,3,148,74,0,708,
        709,5,3,0,0,709,714,3,10,5,0,710,711,5,5,0,0,711,713,3,10,5,0,712,
        710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,
        717,1,0,0,0,716,714,1,0,0,0,717,722,5,4,0,0,718,720,5,32,0,0,719,
        718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,723,3,132,66,0,722,
        719,1,0,0,0,722,723,1,0,0,0,723,748,1,0,0,0,724,734,5,3,0,0,725,
        730,3,48,24,0,726,727,5,5,0,0,727,729,3,48,24,0,728,726,1,0,0,0,
        729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,735,1,0,0,0,
        732,730,1,0,0,0,733,735,3,40,20,0,734,725,1,0,0,0,734,733,1,0,0,
        0,735,736,1,0,0,0,736,737,5,4,0,0,737,748,1,0,0,0,738,739,5,3,0,
        0,739,740,3,38,19,0,740,745,5,4,0,0,741,743,5,32,0,0,742,741,1,0,
        0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,746,3,132,66,0,745,742,1,
        0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,686,1,0,0,0,747,705,1,
        0,0,0,747,724,1,0,0,0,747,738,1,0,0,0,748,49,1,0,0,0,749,762,5,7,
        0,0,750,751,3,124,62,0,751,752,5,2,0,0,752,753,5,7,0,0,753,762,1,
        0,0,0,754,759,3,10,5,0,755,757,5,32,0,0,756,755,1,0,0,0,756,757,
        1,0,0,0,757,758,1,0,0,0,758,760,3,108,54,0,759,756,1,0,0,0,759,760,
        1,0,0,0,760,762,1,0,0,0,761,749,1,0,0,0,761,750,1,0,0,0,761,754,
        1,0,0,0,762,51,1,0,0,0,763,777,5,5,0,0,764,766,5,66,0,0,765,764,
        1,0,0,0,765,766,1,0,0,0,766,773,1,0,0,0,767,769,7,7,0,0,768,770,
        5,75,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,774,1,0,0,0,771,774,
        5,57,0,0,772,774,5,38,0,0,773,767,1,0,0,0,773,771,1,0,0,0,773,772,
        1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,777,5,61,0,0,776,763,
        1,0,0,0,776,765,1,0,0,0,777,53,1,0,0,0,778,779,5,72,0,0,779,793,
        3,10,5,0,780,781,5,83,0,0,781,782,5,3,0,0,782,787,3,126,63,0,783,
        784,5,5,0,0,784,786,3,126,63,0,785,783,1,0,0,0,786,789,1,0,0,0,787,
        785,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,0,789,787,1,0,0,0,790,
        791,5,4,0,0,791,793,1,0,0,0,792,778,1,0,0,0,792,780,1,0,0,0,793,
        55,1,0,0,0,794,796,5,82,0,0,795,797,5,30,0,0,796,795,1,0,0,0,796,
        797,1,0,0,0,797,801,1,0,0,0,798,801,5,58,0,0,799,801,5,47,0,0,800,
        794,1,0,0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,57,1,0,0,0,802,803,
        5,3,0,0,803,808,3,126,63,0,804,805,5,5,0,0,805,807,3,126,63,0,806,
        804,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,
        811,1,0,0,0,810,808,1,0,0,0,811,812,5,4,0,0,812,59,1,0,0,0,813,814,
        5,112,0,0,814,815,5,3,0,0,815,816,5,86,0,0,816,817,3,10,5,0,817,
        818,5,4,0,0,818,61,1,0,0,0,819,821,5,3,0,0,820,822,3,142,71,0,821,
        820,1,0,0,0,821,822,1,0,0,0,822,833,1,0,0,0,823,824,5,90,0,0,824,
        825,5,35,0,0,825,830,3,10,5,0,826,827,5,5,0,0,827,829,3,10,5,0,828,
        826,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,
        834,1,0,0,0,832,830,1,0,0,0,833,823,1,0,0,0,833,834,1,0,0,0,834,
        835,1,0,0,0,835,836,5,74,0,0,836,837,5,35,0,0,837,842,3,82,41,0,
        838,839,5,5,0,0,839,841,3,82,41,0,840,838,1,0,0,0,841,844,1,0,0,
        0,842,840,1,0,0,0,842,843,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,
        0,845,847,3,66,33,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,
        0,0,848,849,5,4,0,0,849,63,1,0,0,0,850,884,5,89,0,0,851,885,3,136,
        68,0,852,854,5,3,0,0,853,855,3,142,71,0,854,853,1,0,0,0,854,855,
        1,0,0,0,855,866,1,0,0,0,856,857,5,90,0,0,857,858,5,35,0,0,858,863,
        3,10,5,0,859,860,5,5,0,0,860,862,3,10,5,0,861,859,1,0,0,0,862,865,
        1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,867,1,0,0,0,865,863,
        1,0,0,0,866,856,1,0,0,0,866,867,1,0,0,0,867,878,1,0,0,0,868,869,
        5,74,0,0,869,870,5,35,0,0,870,875,3,82,41,0,871,872,5,5,0,0,872,
        874,3,82,41,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,
        876,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,878,868,1,0,0,0,878,
        879,1,0,0,0,879,881,1,0,0,0,880,882,3,66,33,0,881,880,1,0,0,0,881,
        882,1,0,0,0,882,883,1,0,0,0,883,885,5,4,0,0,884,851,1,0,0,0,884,
        852,1,0,0,0,885,65,1,0,0,0,886,896,3,68,34,0,887,894,5,114,0,0,888,
        889,5,67,0,0,889,895,5,116,0,0,890,891,5,94,0,0,891,895,5,78,0,0,
        892,895,5,52,0,0,893,895,5,115,0,0,894,888,1,0,0,0,894,890,1,0,0,
        0,894,892,1,0,0,0,894,893,1,0,0,0,895,897,1,0,0,0,896,887,1,0,0,
        0,896,897,1,0,0,0,897,67,1,0,0,0,898,905,7,8,0,0,899,906,3,90,45,
        0,900,901,5,34,0,0,901,902,3,86,43,0,902,903,5,31,0,0,903,904,3,
        88,44,0,904,906,1,0,0,0,905,899,1,0,0,0,905,900,1,0,0,0,906,69,1,
        0,0,0,907,908,3,144,72,0,908,918,5,3,0,0,909,914,3,10,5,0,910,911,
        5,5,0,0,911,913,3,10,5,0,912,910,1,0,0,0,913,916,1,0,0,0,914,912,
        1,0,0,0,914,915,1,0,0,0,915,919,1,0,0,0,916,914,1,0,0,0,917,919,
        5,7,0,0,918,909,1,0,0,0,918,917,1,0,0,0,919,920,1,0,0,0,920,921,
        5,4,0,0,921,71,1,0,0,0,922,923,3,146,73,0,923,936,5,3,0,0,924,926,
        5,43,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,932,
        3,10,5,0,928,929,5,5,0,0,929,931,3,10,5,0,930,928,1,0,0,0,931,934,
        1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,937,1,0,0,0,934,932,
        1,0,0,0,935,937,5,7,0,0,936,925,1,0,0,0,936,935,1,0,0,0,936,937,
        1,0,0,0,937,938,1,0,0,0,938,940,5,4,0,0,939,941,3,60,30,0,940,939,
        1,0,0,0,940,941,1,0,0,0,941,73,1,0,0,0,942,943,3,92,46,0,943,953,
        5,3,0,0,944,949,3,10,5,0,945,946,5,5,0,0,946,948,3,10,5,0,947,945,
        1,0,0,0,948,951,1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,954,
        1,0,0,0,951,949,1,0,0,0,952,954,5,7,0,0,953,944,1,0,0,0,953,952,
        1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,957,5,4,0,0,956,958,
        3,60,30,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,962,
        5,89,0,0,960,963,3,62,31,0,961,963,3,136,68,0,962,960,1,0,0,0,962,
        961,1,0,0,0,963,75,1,0,0,0,964,966,5,87,0,0,965,967,5,77,0,0,966,
        965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,973,3,8,4,0,969,
        970,5,5,0,0,970,972,3,8,4,0,971,969,1,0,0,0,972,975,1,0,0,0,973,
        971,1,0,0,0,973,974,1,0,0,0,974,77,1,0,0,0,975,973,1,0,0,0,976,977,
        5,74,0,0,977,978,5,35,0,0,978,983,3,82,41,0,979,980,5,5,0,0,980,
        982,3,82,41,0,981,979,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,
        984,1,0,0,0,984,79,1,0,0,0,985,983,1,0,0,0,986,987,5,64,0,0,987,
        990,3,10,5,0,988,989,7,9,0,0,989,991,3,10,5,0,990,988,1,0,0,0,990,
        991,1,0,0,0,991,81,1,0,0,0,992,995,3,10,5,0,993,994,5,37,0,0,994,
        996,3,128,64,0,995,993,1,0,0,0,995,996,1,0,0,0,996,998,1,0,0,0,997,
        999,3,84,42,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1002,1,0,0,0,1000,
        1001,5,109,0,0,1001,1003,7,10,0,0,1002,1000,1,0,0,0,1002,1003,1,
        0,0,0,1003,83,1,0,0,0,1004,1005,7,11,0,0,1005,85,1,0,0,0,1006,1007,
        3,10,5,0,1007,1008,5,92,0,0,1008,1017,1,0,0,0,1009,1010,3,10,5,0,
        1010,1011,5,95,0,0,1011,1017,1,0,0,0,1012,1013,5,94,0,0,1013,1017,
        5,78,0,0,1014,1015,5,93,0,0,1015,1017,5,92,0,0,1016,1006,1,0,0,0,
        1016,1009,1,0,0,0,1016,1012,1,0,0,0,1016,1014,1,0,0,0,1017,87,1,
        0,0,0,1018,1019,3,10,5,0,1019,1020,5,92,0,0,1020,1029,1,0,0,0,1021,
        1022,3,10,5,0,1022,1023,5,95,0,0,1023,1029,1,0,0,0,1024,1025,5,94,
        0,0,1025,1029,5,78,0,0,1026,1027,5,93,0,0,1027,1029,5,95,0,0,1028,
        1018,1,0,0,0,1028,1021,1,0,0,0,1028,1024,1,0,0,0,1028,1026,1,0,0,
        0,1029,89,1,0,0,0,1030,1031,3,10,5,0,1031,1032,5,92,0,0,1032,1038,
        1,0,0,0,1033,1034,5,93,0,0,1034,1038,5,92,0,0,1035,1036,5,94,0,0,
        1036,1038,5,78,0,0,1037,1030,1,0,0,0,1037,1033,1,0,0,0,1037,1035,
        1,0,0,0,1038,91,1,0,0,0,1039,1040,7,12,0,0,1040,1041,5,3,0,0,1041,
        1042,3,10,5,0,1042,1043,5,4,0,0,1043,1044,5,89,0,0,1044,1046,5,3,
        0,0,1045,1047,3,98,49,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,
        1048,1,0,0,0,1048,1050,3,102,51,0,1049,1051,3,68,34,0,1050,1049,
        1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,1053,5,4,0,0,1053,
        1125,1,0,0,0,1054,1055,7,13,0,0,1055,1056,5,3,0,0,1056,1057,5,4,
        0,0,1057,1058,5,89,0,0,1058,1060,5,3,0,0,1059,1061,3,98,49,0,1060,
        1059,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1064,3,100,
        50,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,
        1125,5,4,0,0,1066,1067,7,14,0,0,1067,1068,5,3,0,0,1068,1069,5,4,
        0,0,1069,1070,5,89,0,0,1070,1072,5,3,0,0,1071,1073,3,98,49,0,1072,
        1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1075,3,102,
        51,0,1075,1076,5,4,0,0,1076,1125,1,0,0,0,1077,1078,7,15,0,0,1078,
        1079,5,3,0,0,1079,1081,3,10,5,0,1080,1082,3,94,47,0,1081,1080,1,
        0,0,0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,1083,1085,3,96,48,0,1084,
        1083,1,0,0,0,1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,1087,5,4,0,
        0,1087,1088,5,89,0,0,1088,1090,5,3,0,0,1089,1091,3,98,49,0,1090,
        1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1093,3,102,
        51,0,1093,1094,5,4,0,0,1094,1125,1,0,0,0,1095,1096,5,101,0,0,1096,
        1097,5,3,0,0,1097,1098,3,10,5,0,1098,1099,5,5,0,0,1099,1100,3,6,
        3,0,1100,1101,5,4,0,0,1101,1102,5,89,0,0,1102,1104,5,3,0,0,1103,
        1105,3,98,49,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,
        0,0,1106,1108,3,102,51,0,1107,1109,3,68,34,0,1108,1107,1,0,0,0,1108,
        1109,1,0,0,0,1109,1110,1,0,0,0,1110,1111,5,4,0,0,1111,1125,1,0,0,
        0,1112,1113,5,102,0,0,1113,1114,5,3,0,0,1114,1115,3,10,5,0,1115,
        1116,5,4,0,0,1116,1117,5,89,0,0,1117,1119,5,3,0,0,1118,1120,3,98,
        49,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,
        1122,3,102,51,0,1122,1123,5,4,0,0,1123,1125,1,0,0,0,1124,1039,1,
        0,0,0,1124,1054,1,0,0,0,1124,1066,1,0,0,0,1124,1077,1,0,0,0,1124,
        1095,1,0,0,0,1124,1112,1,0,0,0,1125,93,1,0,0,0,1126,1127,5,5,0,0,
        1127,1128,3,6,3,0,1128,95,1,0,0,0,1129,1130,5,5,0,0,1130,1131,3,
        6,3,0,1131,97,1,0,0,0,1132,1133,5,90,0,0,1133,1135,5,35,0,0,1134,
        1136,3,10,5,0,1135,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1135,1,0,
        0,0,1137,1138,1,0,0,0,1138,99,1,0,0,0,1139,1140,5,74,0,0,1140,1142,
        5,35,0,0,1141,1143,3,10,5,0,1142,1141,1,0,0,0,1143,1144,1,0,0,0,
        1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,101,1,0,0,0,1146,1147,5,
        74,0,0,1147,1148,5,35,0,0,1148,1149,3,104,52,0,1149,103,1,0,0,0,
        1150,1152,3,10,5,0,1151,1153,3,84,42,0,1152,1151,1,0,0,0,1152,1153,
        1,0,0,0,1153,1161,1,0,0,0,1154,1155,5,5,0,0,1155,1157,3,10,5,0,1156,
        1158,3,84,42,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1160,1,0,
        0,0,1159,1154,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,
        1,0,0,0,1162,105,1,0,0,0,1163,1161,1,0,0,0,1164,1165,7,16,0,0,1165,
        107,1,0,0,0,1166,1167,7,17,0,0,1167,109,1,0,0,0,1168,1180,3,120,
        60,0,1169,1170,5,3,0,0,1170,1175,3,12,6,0,1171,1172,5,5,0,0,1172,
        1174,3,12,6,0,1173,1171,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,
        0,0,1175,1176,1,0,0,0,1176,1178,1,0,0,0,1177,1175,1,0,0,0,1178,1179,
        5,4,0,0,1179,1181,1,0,0,0,1180,1169,1,0,0,0,1180,1181,1,0,0,0,1181,
        111,1,0,0,0,1182,1183,5,25,0,0,1183,1188,3,12,6,0,1184,1185,5,5,
        0,0,1185,1187,3,12,6,0,1186,1184,1,0,0,0,1187,1190,1,0,0,0,1188,
        1186,1,0,0,0,1188,1189,1,0,0,0,1189,1191,1,0,0,0,1190,1188,1,0,0,
        0,1191,1192,5,26,0,0,1192,113,1,0,0,0,1193,1194,5,27,0,0,1194,1195,
        5,131,0,0,1195,1196,5,29,0,0,1196,1197,5,131,0,0,1197,1198,5,28,
        0,0,1198,115,1,0,0,0,1199,1200,7,18,0,0,1200,117,1,0,0,0,1201,1202,
        3,150,75,0,1202,119,1,0,0,0,1203,1204,3,150,75,0,1204,121,1,0,0,
        0,1205,1206,3,150,75,0,1206,123,1,0,0,0,1207,1208,3,150,75,0,1208,
        125,1,0,0,0,1209,1210,3,150,75,0,1210,127,1,0,0,0,1211,1212,3,150,
        75,0,1212,129,1,0,0,0,1213,1214,3,150,75,0,1214,131,1,0,0,0,1215,
        1216,3,150,75,0,1216,133,1,0,0,0,1217,1218,3,150,75,0,1218,135,1,
        0,0,0,1219,1220,3,150,75,0,1220,137,1,0,0,0,1221,1222,3,150,75,0,
        1222,139,1,0,0,0,1223,1224,3,150,75,0,1224,141,1,0,0,0,1225,1226,
        3,150,75,0,1226,143,1,0,0,0,1227,1228,3,150,75,0,1228,145,1,0,0,
        0,1229,1230,3,150,75,0,1230,147,1,0,0,0,1231,1232,3,150,75,0,1232,
        149,1,0,0,0,1233,1241,5,130,0,0,1234,1241,3,116,58,0,1235,1241,5,
        134,0,0,1236,1237,5,3,0,0,1237,1238,3,150,75,0,1238,1239,5,4,0,0,
        1239,1241,1,0,0,0,1240,1233,1,0,0,0,1240,1234,1,0,0,0,1240,1235,
        1,0,0,0,1240,1236,1,0,0,0,1241,151,1,0,0,0,157,155,163,170,175,181,
        194,197,208,213,226,231,240,247,251,255,258,266,272,275,283,292,
        296,300,327,335,347,352,364,370,377,381,391,394,400,406,415,418,
        422,424,426,437,448,456,481,488,515,524,537,553,557,565,569,572,
        578,582,587,594,603,607,609,613,622,627,629,642,645,648,651,655,
        658,661,666,670,675,678,681,686,690,693,700,705,714,719,722,730,
        734,742,745,747,756,759,761,765,769,773,776,787,792,796,800,808,
        821,830,833,842,846,854,863,866,875,878,881,884,894,896,905,914,
        918,925,932,936,940,949,953,957,962,966,973,983,990,995,998,1002,
        1016,1028,1037,1046,1050,1060,1063,1072,1081,1084,1090,1104,1108,
        1119,1124,1137,1144,1152,1157,1161,1175,1180,1188,1240
    ]

class RelatioLangParser ( Parser ):

    grammarFileName = "RelatioLangParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'", "'{'", "'}'", "'['", "']'", 
                     "':'", "'ALL'", "'AND'", "'AS'", "'ASC'", "'BETWEEN'", 
                     "'BY'", "'CASE'", "'COLLATE'", "'CROSS'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'DESC'", 
                     "'DISTINCT'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXISTS'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IN'", "'INDEXED'", "'INNER'", 
                     "'INTERSECT'", "'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", 
                     "'LIKE'", "'LIMIT'", "'MATCH'", "'NATURAL'", "'NO'", 
                     "'NOT'", "'NOTNULL'", "'NULL'", "'OFFSET'", "'ON'", 
                     "'OR'", "'ORDER'", "'OUTER'", "'RIGHT'", "'RECURSIVE'", 
                     "'ROW'", "'ROWS'", "'SELECT'", "'THEN'", "'UNION'", 
                     "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WITH'", 
                     "'FIRST_VALUE'", "'OVER'", "'PARTITION'", "'RANGE'", 
                     "'PRECEDING'", "'UNBOUNDED'", "'CURRENT'", "'FOLLOWING'", 
                     "'CUME_DIST'", "'DENSE_RANK'", "'LAG'", "'LAST_VALUE'", 
                     "'LEAD'", "'NTH_VALUE'", "'NTILE'", "'PERCENT_RANK'", 
                     "'RANK'", "'ROW_NUMBER'", "'TRUE'", "'FALSE'", "'WINDOW'", 
                     "'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", 
                     "'EXCLUDE'", "'TIES'", "'OTHERS'", "'GRAPH'", "'SOURCE'", 
                     "'INCLUDE'", "'EDGE'", "'ENTER'", "'EXIT'", "'VISITS'", 
                     "'FOR'", "'DISTANCE'", "'TRANSFORMER'", "'SET'", "'GENERATION'", 
                     "'AMOUNT'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "OPEN_CUR", "CLOSE_CUR", "OPEN_SQR", "CLOSE_SQR", 
                      "COLON", "ALL_", "AND_", "AS_", "ASC_", "BETWEEN_", 
                      "BY_", "CASE_", "COLLATE_", "CROSS_", "CURRENT_DATE_", 
                      "CURRENT_TIME_", "CURRENT_TIMESTAMP_", "DESC_", "DISTINCT_", 
                      "ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXISTS_", 
                      "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", 
                      "IN_", "INDEXED_", "INNER_", "INTERSECT_", "IS_", 
                      "ISNULL_", "JOIN_", "LEFT_", "LIKE_", "LIMIT_", "MATCH_", 
                      "NATURAL_", "NO_", "NOT_", "NOTNULL_", "NULL_", "OFFSET_", 
                      "ON_", "OR_", "ORDER_", "OUTER_", "RIGHT_", "RECURSIVE_", 
                      "ROW_", "ROWS_", "SELECT_", "THEN_", "UNION_", "USING_", 
                      "VALUES_", "WHEN_", "WHERE_", "WITH_", "FIRST_VALUE_", 
                      "OVER_", "PARTITION_", "RANGE_", "PRECEDING_", "UNBOUNDED_", 
                      "CURRENT_", "FOLLOWING_", "CUME_DIST_", "DENSE_RANK_", 
                      "LAG_", "LAST_VALUE_", "LEAD_", "NTH_VALUE_", "NTILE_", 
                      "PERCENT_RANK_", "RANK_", "ROW_NUMBER_", "TRUE_", 
                      "FALSE_", "WINDOW_", "NULLS_", "FIRST_", "LAST_", 
                      "FILTER_", "GROUPS_", "EXCLUDE_", "TIES_", "OTHERS_", 
                      "GRAPH_", "SOURCE_", "INCLUDE_", "EDGE_", "ENTER_", 
                      "EXIT_", "VISITS_", "FOR_", "DISTANCE_", "TRANSFORMER_", 
                      "SET_", "GENERATION_", "AMOUNT_", "IDENTIFIER", "INTEGER_LITERAL", 
                      "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
                      "BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
                      "SPACES", "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_signed_number = 3
    RULE_common_table_expression = 4
    RULE_expr = 5
    RULE_literal_value = 6
    RULE_value_row = 7
    RULE_values_clause = 8
    RULE_graph_source_stmt = 9
    RULE_include_edge_stmt = 10
    RULE_exclude_edge_stmt = 11
    RULE_no_enter_stmt = 12
    RULE_no_exit_stmt = 13
    RULE_limit_visits_stmt = 14
    RULE_limit_distance_stmt = 15
    RULE_transformer_stmt = 16
    RULE_set_generation_values_stmt = 17
    RULE_set_generation_amount_stmt = 18
    RULE_select_stmt = 19
    RULE_join_clause = 20
    RULE_select_core = 21
    RULE_simple_select_stmt = 22
    RULE_compound_select_stmt = 23
    RULE_table_or_subquery = 24
    RULE_result_column = 25
    RULE_join_operator = 26
    RULE_join_constraint = 27
    RULE_compound_operator = 28
    RULE_column_name_list = 29
    RULE_filter_clause = 30
    RULE_window_defn = 31
    RULE_over_clause = 32
    RULE_frame_spec = 33
    RULE_frame_clause = 34
    RULE_simple_function_invocation = 35
    RULE_aggregate_function_invocation = 36
    RULE_window_function_invocation = 37
    RULE_common_table_stmt = 38
    RULE_order_by_stmt = 39
    RULE_limit_stmt = 40
    RULE_ordering_term = 41
    RULE_asc_desc = 42
    RULE_frame_left = 43
    RULE_frame_right = 44
    RULE_frame_single = 45
    RULE_window_function = 46
    RULE_offset = 47
    RULE_default_value = 48
    RULE_partition_by = 49
    RULE_order_by_expr = 50
    RULE_order_by_expr_asc_desc = 51
    RULE_expr_asc_desc = 52
    RULE_unary_operator = 53
    RULE_column_alias = 54
    RULE_function_call = 55
    RULE_set_of_values = 56
    RULE_range_of_values = 57
    RULE_keyword = 58
    RULE_name = 59
    RULE_function_name = 60
    RULE_schema_name = 61
    RULE_table_name = 62
    RULE_column_name = 63
    RULE_collation_name = 64
    RULE_index_name = 65
    RULE_table_alias = 66
    RULE_transaction_name = 67
    RULE_window_name = 68
    RULE_alias = 69
    RULE_filename = 70
    RULE_base_window_name = 71
    RULE_simple_func = 72
    RULE_aggregate_func = 73
    RULE_table_function_name = 74
    RULE_any_name = 75

    ruleNames =  [ "parse", "sql_stmt_list", "sql_stmt", "signed_number", 
                   "common_table_expression", "expr", "literal_value", "value_row", 
                   "values_clause", "graph_source_stmt", "include_edge_stmt", 
                   "exclude_edge_stmt", "no_enter_stmt", "no_exit_stmt", 
                   "limit_visits_stmt", "limit_distance_stmt", "transformer_stmt", 
                   "set_generation_values_stmt", "set_generation_amount_stmt", 
                   "select_stmt", "join_clause", "select_core", "simple_select_stmt", 
                   "compound_select_stmt", "table_or_subquery", "result_column", 
                   "join_operator", "join_constraint", "compound_operator", 
                   "column_name_list", "filter_clause", "window_defn", "over_clause", 
                   "frame_spec", "frame_clause", "simple_function_invocation", 
                   "aggregate_function_invocation", "window_function_invocation", 
                   "common_table_stmt", "order_by_stmt", "limit_stmt", "ordering_term", 
                   "asc_desc", "frame_left", "frame_right", "frame_single", 
                   "window_function", "offset", "default_value", "partition_by", 
                   "order_by_expr", "order_by_expr_asc_desc", "expr_asc_desc", 
                   "unary_operator", "column_alias", "function_call", "set_of_values", 
                   "range_of_values", "keyword", "name", "function_name", 
                   "schema_name", "table_name", "column_name", "collation_name", 
                   "index_name", "table_alias", "transaction_name", "window_name", 
                   "alias", "filename", "base_window_name", "simple_func", 
                   "aggregate_func", "table_function_name", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    OPEN_CUR=25
    CLOSE_CUR=26
    OPEN_SQR=27
    CLOSE_SQR=28
    COLON=29
    ALL_=30
    AND_=31
    AS_=32
    ASC_=33
    BETWEEN_=34
    BY_=35
    CASE_=36
    COLLATE_=37
    CROSS_=38
    CURRENT_DATE_=39
    CURRENT_TIME_=40
    CURRENT_TIMESTAMP_=41
    DESC_=42
    DISTINCT_=43
    ELSE_=44
    END_=45
    ESCAPE_=46
    EXCEPT_=47
    EXISTS_=48
    FROM_=49
    FULL_=50
    GLOB_=51
    GROUP_=52
    HAVING_=53
    IF_=54
    IN_=55
    INDEXED_=56
    INNER_=57
    INTERSECT_=58
    IS_=59
    ISNULL_=60
    JOIN_=61
    LEFT_=62
    LIKE_=63
    LIMIT_=64
    MATCH_=65
    NATURAL_=66
    NO_=67
    NOT_=68
    NOTNULL_=69
    NULL_=70
    OFFSET_=71
    ON_=72
    OR_=73
    ORDER_=74
    OUTER_=75
    RIGHT_=76
    RECURSIVE_=77
    ROW_=78
    ROWS_=79
    SELECT_=80
    THEN_=81
    UNION_=82
    USING_=83
    VALUES_=84
    WHEN_=85
    WHERE_=86
    WITH_=87
    FIRST_VALUE_=88
    OVER_=89
    PARTITION_=90
    RANGE_=91
    PRECEDING_=92
    UNBOUNDED_=93
    CURRENT_=94
    FOLLOWING_=95
    CUME_DIST_=96
    DENSE_RANK_=97
    LAG_=98
    LAST_VALUE_=99
    LEAD_=100
    NTH_VALUE_=101
    NTILE_=102
    PERCENT_RANK_=103
    RANK_=104
    ROW_NUMBER_=105
    TRUE_=106
    FALSE_=107
    WINDOW_=108
    NULLS_=109
    FIRST_=110
    LAST_=111
    FILTER_=112
    GROUPS_=113
    EXCLUDE_=114
    TIES_=115
    OTHERS_=116
    GRAPH_=117
    SOURCE_=118
    INCLUDE_=119
    EDGE_=120
    ENTER_=121
    EXIT_=122
    VISITS_=123
    FOR_=124
    DISTANCE_=125
    TRANSFORMER_=126
    SET_=127
    GENERATION_=128
    AMOUNT_=129
    IDENTIFIER=130
    INTEGER_LITERAL=131
    NUMERIC_LITERAL=132
    BIND_PARAMETER=133
    STRING_LITERAL=134
    BLOB_LITERAL=135
    SINGLE_LINE_COMMENT=136
    MULTILINE_COMMENT=137
    SPACES=138
    UNEXPECTED_CHAR=139

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(RelatioLangParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Sql_stmt_listContext,i)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = RelatioLangParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -4565524122246840311) != 0):
                self.state = 152
                self.sql_stmt_list()
                self.state = 157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 158
            self.match(RelatioLangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.SCOL)
            else:
                return self.getToken(RelatioLangParser.SCOL, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = RelatioLangParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 160
                self.match(RelatioLangParser.SCOL)
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 166
            self.sql_stmt()
            self.state = 175
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 168 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 167
                        self.match(RelatioLangParser.SCOL)
                        self.state = 170 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    self.state = 172
                    self.sql_stmt() 
                self.state = 177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 178
                    self.match(RelatioLangParser.SCOL) 
                self.state = 183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graph_source_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Graph_source_stmtContext,0)


        def include_edge_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Include_edge_stmtContext,0)


        def exclude_edge_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Exclude_edge_stmtContext,0)


        def no_enter_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.No_enter_stmtContext,0)


        def no_exit_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.No_exit_stmtContext,0)


        def limit_visits_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Limit_visits_stmtContext,0)


        def limit_distance_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Limit_distance_stmtContext,0)


        def transformer_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Transformer_stmtContext,0)


        def set_generation_values_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Set_generation_values_stmtContext,0)


        def set_generation_amount_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Set_generation_amount_stmtContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = RelatioLangParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        try:
            self.state = 194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.graph_source_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 185
                self.include_edge_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 186
                self.exclude_edge_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 187
                self.no_enter_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 188
                self.no_exit_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self.limit_visits_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 190
                self.limit_distance_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 191
                self.transformer_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 192
                self.set_generation_values_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 193
                self.set_generation_amount_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(RelatioLangParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(RelatioLangParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(RelatioLangParser.MINUS, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = RelatioLangParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 196
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 199
            self.match(RelatioLangParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def AS_(self):
            return self.getToken(RelatioLangParser.AS_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.OPEN_PAR)
            else:
                return self.getToken(RelatioLangParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.CLOSE_PAR)
            else:
                return self.getToken(RelatioLangParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = RelatioLangParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.table_name()
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 202
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 203
                self.column_name()
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 204
                    self.match(RelatioLangParser.COMMA)
                    self.state = 205
                    self.column_name()
                    self.state = 210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 211
                self.match(RelatioLangParser.CLOSE_PAR)


            self.state = 215
            self.match(RelatioLangParser.AS_)
            self.state = 216
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 217
            self.select_stmt()
            self.state = 218
            self.match(RelatioLangParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(RelatioLangParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(RelatioLangParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.DOT)
            else:
                return self.getToken(RelatioLangParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(RelatioLangParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(RelatioLangParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Over_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(RelatioLangParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def select_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Select_stmtContext,0)


        def EXISTS_(self):
            return self.getToken(RelatioLangParser.EXISTS_, 0)

        def NOT_(self):
            return self.getToken(RelatioLangParser.NOT_, 0)

        def CASE_(self):
            return self.getToken(RelatioLangParser.CASE_, 0)

        def END_(self):
            return self.getToken(RelatioLangParser.END_, 0)

        def WHEN_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.WHEN_)
            else:
                return self.getToken(RelatioLangParser.WHEN_, i)

        def THEN_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.THEN_)
            else:
                return self.getToken(RelatioLangParser.THEN_, i)

        def ELSE_(self):
            return self.getToken(RelatioLangParser.ELSE_, 0)

        def PIPE2(self):
            return self.getToken(RelatioLangParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(RelatioLangParser.DIV, 0)

        def MOD(self):
            return self.getToken(RelatioLangParser.MOD, 0)

        def PLUS(self):
            return self.getToken(RelatioLangParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(RelatioLangParser.MINUS, 0)

        def LT2(self):
            return self.getToken(RelatioLangParser.LT2, 0)

        def GT2(self):
            return self.getToken(RelatioLangParser.GT2, 0)

        def AMP(self):
            return self.getToken(RelatioLangParser.AMP, 0)

        def PIPE(self):
            return self.getToken(RelatioLangParser.PIPE, 0)

        def LT(self):
            return self.getToken(RelatioLangParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(RelatioLangParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(RelatioLangParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(RelatioLangParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(RelatioLangParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(RelatioLangParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(RelatioLangParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(RelatioLangParser.NOT_EQ2, 0)

        def IS_(self):
            return self.getToken(RelatioLangParser.IS_, 0)

        def FROM_(self):
            return self.getToken(RelatioLangParser.FROM_, 0)

        def IN_(self):
            return self.getToken(RelatioLangParser.IN_, 0)

        def LIKE_(self):
            return self.getToken(RelatioLangParser.LIKE_, 0)

        def GLOB_(self):
            return self.getToken(RelatioLangParser.GLOB_, 0)

        def MATCH_(self):
            return self.getToken(RelatioLangParser.MATCH_, 0)

        def AND_(self):
            return self.getToken(RelatioLangParser.AND_, 0)

        def OR_(self):
            return self.getToken(RelatioLangParser.OR_, 0)

        def BETWEEN_(self):
            return self.getToken(RelatioLangParser.BETWEEN_, 0)

        def COLLATE_(self):
            return self.getToken(RelatioLangParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Collation_nameContext,0)


        def ESCAPE_(self):
            return self.getToken(RelatioLangParser.ESCAPE_, 0)

        def ISNULL_(self):
            return self.getToken(RelatioLangParser.ISNULL_, 0)

        def NOTNULL_(self):
            return self.getToken(RelatioLangParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(RelatioLangParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RelatioLangParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 221
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 222
                self.match(RelatioLangParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 226
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 223
                        self.schema_name()
                        self.state = 224
                        self.match(RelatioLangParser.DOT)


                    self.state = 228
                    self.table_name()
                    self.state = 229
                    self.match(RelatioLangParser.DOT)


                self.state = 233
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 234
                self.unary_operator()
                self.state = 235
                self.expr(19)
                pass

            elif la_ == 5:
                self.state = 237
                self.function_name()
                self.state = 238
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 8, 9, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135]:
                    self.state = 240
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                    if la_ == 1:
                        self.state = 239
                        self.match(RelatioLangParser.DISTINCT_)


                    self.state = 242
                    self.expr(0)
                    self.state = 247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 243
                        self.match(RelatioLangParser.COMMA)
                        self.state = 244
                        self.expr(0)
                        self.state = 249
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [7]:
                    self.state = 250
                    self.match(RelatioLangParser.STAR)
                    pass
                elif token in [4]:
                    pass
                else:
                    pass
                self.state = 253
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 254
                    self.filter_clause()


                self.state = 258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 257
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 260
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 261
                self.expr(0)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 262
                    self.match(RelatioLangParser.COMMA)
                    self.state = 263
                    self.expr(0)
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 269
                self.match(RelatioLangParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48 or _la==68:
                    self.state = 272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68:
                        self.state = 271
                        self.match(RelatioLangParser.NOT_)


                    self.state = 274
                    self.match(RelatioLangParser.EXISTS_)


                self.state = 277
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 278
                self.select_stmt()
                self.state = 279
                self.match(RelatioLangParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 281
                self.match(RelatioLangParser.CASE_)
                self.state = 283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 282
                    self.expr(0)


                self.state = 290 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 285
                    self.match(RelatioLangParser.WHEN_)
                    self.state = 286
                    self.expr(0)
                    self.state = 287
                    self.match(RelatioLangParser.THEN_)
                    self.state = 288
                    self.expr(0)
                    self.state = 292 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==85):
                        break

                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 294
                    self.match(RelatioLangParser.ELSE_)
                    self.state = 295
                    self.expr(0)


                self.state = 298
                self.match(RelatioLangParser.END_)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 424
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 302
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 303
                        self.match(RelatioLangParser.PIPE2)
                        self.state = 304
                        self.expr(19)
                        pass

                    elif la_ == 2:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 305
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 306
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12416) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 307
                        self.expr(18)
                        pass

                    elif la_ == 3:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 308
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 309
                        _la = self._input.LA(1)
                        if not(_la==8 or _la==9):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 310
                        self.expr(17)
                        pass

                    elif la_ == 4:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 311
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 312
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 313
                        self.expr(16)
                        pass

                    elif la_ == 5:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 314
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 315
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3932160) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 316
                        self.expr(15)
                        pass

                    elif la_ == 6:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 317
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 335
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                        if la_ == 1:
                            self.state = 318
                            self.match(RelatioLangParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 319
                            self.match(RelatioLangParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 320
                            self.match(RelatioLangParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 321
                            self.match(RelatioLangParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 322
                            self.match(RelatioLangParser.IS_)
                            pass

                        elif la_ == 6:
                            self.state = 323
                            self.match(RelatioLangParser.IS_)
                            self.state = 324
                            self.match(RelatioLangParser.NOT_)
                            pass

                        elif la_ == 7:
                            self.state = 325
                            self.match(RelatioLangParser.IS_)
                            self.state = 327
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==68:
                                self.state = 326
                                self.match(RelatioLangParser.NOT_)


                            self.state = 329
                            self.match(RelatioLangParser.DISTINCT_)
                            self.state = 330
                            self.match(RelatioLangParser.FROM_)
                            pass

                        elif la_ == 8:
                            self.state = 331
                            self.match(RelatioLangParser.IN_)
                            pass

                        elif la_ == 9:
                            self.state = 332
                            self.match(RelatioLangParser.LIKE_)
                            pass

                        elif la_ == 10:
                            self.state = 333
                            self.match(RelatioLangParser.GLOB_)
                            pass

                        elif la_ == 11:
                            self.state = 334
                            self.match(RelatioLangParser.MATCH_)
                            pass


                        self.state = 337
                        self.expr(14)
                        pass

                    elif la_ == 7:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 338
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 339
                        self.match(RelatioLangParser.AND_)
                        self.state = 340
                        self.expr(13)
                        pass

                    elif la_ == 8:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 341
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 342
                        self.match(RelatioLangParser.OR_)
                        self.state = 343
                        self.expr(12)
                        pass

                    elif la_ == 9:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 344
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 345
                        self.match(RelatioLangParser.IS_)
                        self.state = 347
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                        if la_ == 1:
                            self.state = 346
                            self.match(RelatioLangParser.NOT_)


                        self.state = 349
                        self.expr(6)
                        pass

                    elif la_ == 10:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 350
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 352
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==68:
                            self.state = 351
                            self.match(RelatioLangParser.NOT_)


                        self.state = 354
                        self.match(RelatioLangParser.BETWEEN_)
                        self.state = 355
                        self.expr(0)
                        self.state = 356
                        self.match(RelatioLangParser.AND_)
                        self.state = 357
                        self.expr(5)
                        pass

                    elif la_ == 11:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 359
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 360
                        self.match(RelatioLangParser.COLLATE_)
                        self.state = 361
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 362
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 364
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==68:
                            self.state = 363
                            self.match(RelatioLangParser.NOT_)


                        self.state = 366
                        _la = self._input.LA(1)
                        if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 20481) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 367
                        self.expr(0)
                        self.state = 370
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                        if la_ == 1:
                            self.state = 368
                            self.match(RelatioLangParser.ESCAPE_)
                            self.state = 369
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 372
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 377
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [60]:
                            self.state = 373
                            self.match(RelatioLangParser.ISNULL_)
                            pass
                        elif token in [69]:
                            self.state = 374
                            self.match(RelatioLangParser.NOTNULL_)
                            pass
                        elif token in [68]:
                            self.state = 375
                            self.match(RelatioLangParser.NOT_)
                            self.state = 376
                            self.match(RelatioLangParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = RelatioLangParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 379
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 381
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==68:
                            self.state = 380
                            self.match(RelatioLangParser.NOT_)


                        self.state = 383
                        self.match(RelatioLangParser.IN_)
                        self.state = 422
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                        if la_ == 1:
                            self.state = 384
                            self.match(RelatioLangParser.OPEN_PAR)
                            self.state = 394
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                            if la_ == 1:
                                self.state = 385
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 386
                                self.expr(0)
                                self.state = 391
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==5:
                                    self.state = 387
                                    self.match(RelatioLangParser.COMMA)
                                    self.state = 388
                                    self.expr(0)
                                    self.state = 393
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 396
                            self.match(RelatioLangParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 400
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                            if la_ == 1:
                                self.state = 397
                                self.schema_name()
                                self.state = 398
                                self.match(RelatioLangParser.DOT)


                            self.state = 402
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 406
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                            if la_ == 1:
                                self.state = 403
                                self.schema_name()
                                self.state = 404
                                self.match(RelatioLangParser.DOT)


                            self.state = 408
                            self.table_function_name()
                            self.state = 409
                            self.match(RelatioLangParser.OPEN_PAR)
                            self.state = 418
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1073740024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1159676904047902721) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 255) != 0):
                                self.state = 410
                                self.expr(0)
                                self.state = 415
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==5:
                                    self.state = 411
                                    self.match(RelatioLangParser.COMMA)
                                    self.state = 412
                                    self.expr(0)
                                    self.state = 417
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 420
                            self.match(RelatioLangParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(RelatioLangParser.NUMERIC_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(RelatioLangParser.INTEGER_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(RelatioLangParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(RelatioLangParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(RelatioLangParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(RelatioLangParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(RelatioLangParser.FALSE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(RelatioLangParser.CURRENT_TIME_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(RelatioLangParser.CURRENT_DATE_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(RelatioLangParser.CURRENT_TIMESTAMP_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = RelatioLangParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 2147483655) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 905969667) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_value_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_row" ):
                listener.enterValue_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_row" ):
                listener.exitValue_row(self)




    def value_row(self):

        localctx = RelatioLangParser.Value_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_value_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 432
            self.expr(0)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 433
                self.match(RelatioLangParser.COMMA)
                self.state = 434
                self.expr(0)
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 440
            self.match(RelatioLangParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES_(self):
            return self.getToken(RelatioLangParser.VALUES_, 0)

        def value_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Value_rowContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Value_rowContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = RelatioLangParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(RelatioLangParser.VALUES_)
            self.state = 443
            self.value_row()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 444
                self.match(RelatioLangParser.COMMA)
                self.state = 445
                self.value_row()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Graph_source_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAPH_(self):
            return self.getToken(RelatioLangParser.GRAPH_, 0)

        def SOURCE_(self):
            return self.getToken(RelatioLangParser.SOURCE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def WHERE_(self):
            return self.getToken(RelatioLangParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_graph_source_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraph_source_stmt" ):
                listener.enterGraph_source_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraph_source_stmt" ):
                listener.exitGraph_source_stmt(self)




    def graph_source_stmt(self):

        localctx = RelatioLangParser.Graph_source_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_graph_source_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(RelatioLangParser.GRAPH_)
            self.state = 452
            self.match(RelatioLangParser.SOURCE_)
            self.state = 453
            self.table_name()
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 454
                self.match(RelatioLangParser.WHERE_)
                self.state = 455
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_edge_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE_(self):
            return self.getToken(RelatioLangParser.INCLUDE_, 0)

        def EDGE_(self):
            return self.getToken(RelatioLangParser.EDGE_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.DOT)
            else:
                return self.getToken(RelatioLangParser.DOT, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_include_edge_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_edge_stmt" ):
                listener.enterInclude_edge_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_edge_stmt" ):
                listener.exitInclude_edge_stmt(self)




    def include_edge_stmt(self):

        localctx = RelatioLangParser.Include_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_include_edge_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(RelatioLangParser.INCLUDE_)
            self.state = 459
            self.match(RelatioLangParser.EDGE_)
            self.state = 460
            self.table_name()
            self.state = 461
            self.match(RelatioLangParser.DOT)
            self.state = 462
            self.column_name()
            self.state = 463
            self.table_name()
            self.state = 464
            self.match(RelatioLangParser.DOT)
            self.state = 465
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclude_edge_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE_(self):
            return self.getToken(RelatioLangParser.EXCLUDE_, 0)

        def EDGE_(self):
            return self.getToken(RelatioLangParser.EDGE_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.DOT)
            else:
                return self.getToken(RelatioLangParser.DOT, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_exclude_edge_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclude_edge_stmt" ):
                listener.enterExclude_edge_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclude_edge_stmt" ):
                listener.exitExclude_edge_stmt(self)




    def exclude_edge_stmt(self):

        localctx = RelatioLangParser.Exclude_edge_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_exclude_edge_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(RelatioLangParser.EXCLUDE_)
            self.state = 468
            self.match(RelatioLangParser.EDGE_)
            self.state = 469
            self.table_name()
            self.state = 470
            self.match(RelatioLangParser.DOT)
            self.state = 471
            self.column_name()
            self.state = 472
            self.table_name()
            self.state = 473
            self.match(RelatioLangParser.DOT)
            self.state = 474
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_enter_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO_(self):
            return self.getToken(RelatioLangParser.NO_, 0)

        def ENTER_(self):
            return self.getToken(RelatioLangParser.ENTER_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def WHERE_(self):
            return self.getToken(RelatioLangParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_no_enter_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_enter_stmt" ):
                listener.enterNo_enter_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_enter_stmt" ):
                listener.exitNo_enter_stmt(self)




    def no_enter_stmt(self):

        localctx = RelatioLangParser.No_enter_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_no_enter_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(RelatioLangParser.NO_)
            self.state = 477
            self.match(RelatioLangParser.ENTER_)
            self.state = 478
            self.table_name()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 479
                self.match(RelatioLangParser.WHERE_)
                self.state = 480
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_exit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO_(self):
            return self.getToken(RelatioLangParser.NO_, 0)

        def EXIT_(self):
            return self.getToken(RelatioLangParser.EXIT_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def WHERE_(self):
            return self.getToken(RelatioLangParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_no_exit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_exit_stmt" ):
                listener.enterNo_exit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_exit_stmt" ):
                listener.exitNo_exit_stmt(self)




    def no_exit_stmt(self):

        localctx = RelatioLangParser.No_exit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_no_exit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(RelatioLangParser.NO_)
            self.state = 484
            self.match(RelatioLangParser.EXIT_)
            self.state = 485
            self.table_name()
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 486
                self.match(RelatioLangParser.WHERE_)
                self.state = 487
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_visits_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(RelatioLangParser.LIMIT_, 0)

        def VISITS_(self):
            return self.getToken(RelatioLangParser.VISITS_, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(RelatioLangParser.INTEGER_LITERAL, 0)

        def FOR_(self):
            return self.getToken(RelatioLangParser.FOR_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_limit_visits_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_visits_stmt" ):
                listener.enterLimit_visits_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_visits_stmt" ):
                listener.exitLimit_visits_stmt(self)




    def limit_visits_stmt(self):

        localctx = RelatioLangParser.Limit_visits_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_limit_visits_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(RelatioLangParser.LIMIT_)
            self.state = 491
            self.match(RelatioLangParser.VISITS_)
            self.state = 492
            self.match(RelatioLangParser.INTEGER_LITERAL)
            self.state = 493
            self.match(RelatioLangParser.FOR_)
            self.state = 494
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_distance_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(RelatioLangParser.LIMIT_, 0)

        def DISTANCE_(self):
            return self.getToken(RelatioLangParser.DISTANCE_, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(RelatioLangParser.INTEGER_LITERAL, 0)

        def FOR_(self):
            return self.getToken(RelatioLangParser.FOR_, 0)

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_limit_distance_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_distance_stmt" ):
                listener.enterLimit_distance_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_distance_stmt" ):
                listener.exitLimit_distance_stmt(self)




    def limit_distance_stmt(self):

        localctx = RelatioLangParser.Limit_distance_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_limit_distance_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(RelatioLangParser.LIMIT_)
            self.state = 497
            self.match(RelatioLangParser.DISTANCE_)
            self.state = 498
            self.match(RelatioLangParser.INTEGER_LITERAL)
            self.state = 499
            self.match(RelatioLangParser.FOR_)
            self.state = 500
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transformer_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSFORMER_(self):
            return self.getToken(RelatioLangParser.TRANSFORMER_, 0)

        def function_call(self):
            return self.getTypedRuleContext(RelatioLangParser.Function_callContext,0)


        def FOR_(self):
            return self.getToken(RelatioLangParser.FOR_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.DOT)
            else:
                return self.getToken(RelatioLangParser.DOT, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_transformer_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformer_stmt" ):
                listener.enterTransformer_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformer_stmt" ):
                listener.exitTransformer_stmt(self)




    def transformer_stmt(self):

        localctx = RelatioLangParser.Transformer_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_transformer_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(RelatioLangParser.TRANSFORMER_)
            self.state = 503
            self.function_call()
            self.state = 504
            self.match(RelatioLangParser.FOR_)
            self.state = 505
            self.table_name()
            self.state = 506
            self.match(RelatioLangParser.DOT)
            self.state = 507
            self.column_name()
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 508
                self.match(RelatioLangParser.COMMA)
                self.state = 509
                self.table_name()
                self.state = 510
                self.match(RelatioLangParser.DOT)
                self.state = 511
                self.column_name()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_generation_values_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_(self):
            return self.getToken(RelatioLangParser.SET_, 0)

        def GENERATION_(self):
            return self.getToken(RelatioLangParser.GENERATION_, 0)

        def VALUES_(self):
            return self.getToken(RelatioLangParser.VALUES_, 0)

        def FOR_(self):
            return self.getToken(RelatioLangParser.FOR_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.DOT)
            else:
                return self.getToken(RelatioLangParser.DOT, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def set_of_values(self):
            return self.getTypedRuleContext(RelatioLangParser.Set_of_valuesContext,0)


        def range_of_values(self):
            return self.getTypedRuleContext(RelatioLangParser.Range_of_valuesContext,0)


        def function_call(self):
            return self.getTypedRuleContext(RelatioLangParser.Function_callContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_set_generation_values_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_generation_values_stmt" ):
                listener.enterSet_generation_values_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_generation_values_stmt" ):
                listener.exitSet_generation_values_stmt(self)




    def set_generation_values_stmt(self):

        localctx = RelatioLangParser.Set_generation_values_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_set_generation_values_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(RelatioLangParser.SET_)
            self.state = 519
            self.match(RelatioLangParser.GENERATION_)
            self.state = 520
            self.match(RelatioLangParser.VALUES_)
            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 521
                self.set_of_values()
                pass
            elif token in [27]:
                self.state = 522
                self.range_of_values()
                pass
            elif token in [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 134]:
                self.state = 523
                self.function_call()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 526
            self.match(RelatioLangParser.FOR_)
            self.state = 527
            self.table_name()
            self.state = 528
            self.match(RelatioLangParser.DOT)
            self.state = 529
            self.column_name()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 530
                self.match(RelatioLangParser.COMMA)
                self.state = 531
                self.table_name()
                self.state = 532
                self.match(RelatioLangParser.DOT)
                self.state = 533
                self.column_name()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_generation_amount_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_(self):
            return self.getToken(RelatioLangParser.SET_, 0)

        def GENERATION_(self):
            return self.getToken(RelatioLangParser.GENERATION_, 0)

        def AMOUNT_(self):
            return self.getToken(RelatioLangParser.AMOUNT_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.ASSIGN)
            else:
                return self.getToken(RelatioLangParser.ASSIGN, i)

        def INTEGER_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.INTEGER_LITERAL)
            else:
                return self.getToken(RelatioLangParser.INTEGER_LITERAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_set_generation_amount_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_generation_amount_stmt" ):
                listener.enterSet_generation_amount_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_generation_amount_stmt" ):
                listener.exitSet_generation_amount_stmt(self)




    def set_generation_amount_stmt(self):

        localctx = RelatioLangParser.Set_generation_amount_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_set_generation_amount_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(RelatioLangParser.SET_)
            self.state = 541
            self.match(RelatioLangParser.GENERATION_)
            self.state = 542
            self.match(RelatioLangParser.AMOUNT_)
            self.state = 543
            self.table_name()
            self.state = 544
            self.match(RelatioLangParser.ASSIGN)
            self.state = 545
            self.match(RelatioLangParser.INTEGER_LITERAL)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 546
                self.match(RelatioLangParser.COMMA)
                self.state = 547
                self.table_name()
                self.state = 548
                self.match(RelatioLangParser.ASSIGN)
                self.state = 549
                self.match(RelatioLangParser.INTEGER_LITERAL)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = RelatioLangParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 556
                self.common_table_stmt()


            self.state = 559
            self.select_core()
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 34359740417) != 0):
                self.state = 560
                self.compound_operator()
                self.state = 561
                self.select_core()
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 568
                self.order_by_stmt()


            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 571
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = RelatioLangParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.table_or_subquery()
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 7062770390501687328) != 0) or _la==66 or _la==76:
                self.state = 575
                self.join_operator()
                self.state = 576
                self.table_or_subquery()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72 or _la==83:
                    self.state = 577
                    self.join_constraint()


                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExprContext
            self._expr = None # ExprContext
            self.groupByExpr = list() # of ExprContexts
            self.havingExpr = None # ExprContext

        def SELECT_(self):
            return self.getToken(RelatioLangParser.SELECT_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def FROM_(self):
            return self.getToken(RelatioLangParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(RelatioLangParser.WHERE_, 0)

        def GROUP_(self):
            return self.getToken(RelatioLangParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def WINDOW_(self):
            return self.getToken(RelatioLangParser.WINDOW_, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Window_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.AS_)
            else:
                return self.getToken(RelatioLangParser.AS_, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Window_defnContext,i)


        def DISTINCT_(self):
            return self.getToken(RelatioLangParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(RelatioLangParser.ALL_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Join_clauseContext,0)


        def HAVING_(self):
            return self.getToken(RelatioLangParser.HAVING_, 0)

        def values_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Values_clauseContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = RelatioLangParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.match(RelatioLangParser.SELECT_)
                self.state = 587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 586
                    _la = self._input.LA(1)
                    if not(_la==30 or _la==43):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 589
                self.result_column()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 590
                    self.match(RelatioLangParser.COMMA)
                    self.state = 591
                    self.result_column()
                    self.state = 596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 597
                    self.match(RelatioLangParser.FROM_)
                    self.state = 607
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        self.state = 598
                        self.table_or_subquery()
                        self.state = 603
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 599
                            self.match(RelatioLangParser.COMMA)
                            self.state = 600
                            self.table_or_subquery()
                            self.state = 605
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 606
                        self.join_clause()
                        pass




                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 611
                    self.match(RelatioLangParser.WHERE_)
                    self.state = 612
                    localctx.whereExpr = self.expr(0)


                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 615
                    self.match(RelatioLangParser.GROUP_)
                    self.state = 616
                    self.match(RelatioLangParser.BY_)
                    self.state = 617
                    localctx._expr = self.expr(0)
                    localctx.groupByExpr.append(localctx._expr)
                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 618
                        self.match(RelatioLangParser.COMMA)
                        self.state = 619
                        localctx._expr = self.expr(0)
                        localctx.groupByExpr.append(localctx._expr)
                        self.state = 624
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==53:
                        self.state = 625
                        self.match(RelatioLangParser.HAVING_)
                        self.state = 626
                        localctx.havingExpr = self.expr(0)




                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 631
                    self.match(RelatioLangParser.WINDOW_)
                    self.state = 632
                    self.window_name()
                    self.state = 633
                    self.match(RelatioLangParser.AS_)
                    self.state = 634
                    self.window_defn()
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 635
                        self.match(RelatioLangParser.COMMA)
                        self.state = 636
                        self.window_name()
                        self.state = 637
                        self.match(RelatioLangParser.AS_)
                        self.state = 638
                        self.window_defn()
                        self.state = 644
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.values_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(RelatioLangParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = RelatioLangParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 650
                self.common_table_stmt()


            self.state = 653
            self.select_core()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 654
                self.order_by_stmt()


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 657
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Limit_stmtContext,0)


        def UNION_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.UNION_)
            else:
                return self.getToken(RelatioLangParser.UNION_, i)

        def INTERSECT_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.INTERSECT_)
            else:
                return self.getToken(RelatioLangParser.INTERSECT_, i)

        def EXCEPT_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.EXCEPT_)
            else:
                return self.getToken(RelatioLangParser.EXCEPT_, i)

        def ALL_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.ALL_)
            else:
                return self.getToken(RelatioLangParser.ALL_, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = RelatioLangParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 660
                self.common_table_stmt()


            self.state = 663
            self.select_core()
            self.state = 673 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 670
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [82]:
                    self.state = 664
                    self.match(RelatioLangParser.UNION_)
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==30:
                        self.state = 665
                        self.match(RelatioLangParser.ALL_)


                    pass
                elif token in [58]:
                    self.state = 668
                    self.match(RelatioLangParser.INTERSECT_)
                    pass
                elif token in [47]:
                    self.state = 669
                    self.match(RelatioLangParser.EXCEPT_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 672
                self.select_core()
                self.state = 675 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 34359740417) != 0)):
                    break

            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 677
                self.order_by_stmt()


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 680
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(RelatioLangParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_aliasContext,0)


        def INDEXED_(self):
            return self.getToken(RelatioLangParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(RelatioLangParser.NOT_, 0)

        def AS_(self):
            return self.getToken(RelatioLangParser.AS_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(RelatioLangParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = RelatioLangParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 683
                    self.schema_name()
                    self.state = 684
                    self.match(RelatioLangParser.DOT)


                self.state = 688
                self.table_name()
                self.state = 693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 690
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 689
                        self.match(RelatioLangParser.AS_)


                    self.state = 692
                    self.table_alias()


                self.state = 700
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [56]:
                    self.state = 695
                    self.match(RelatioLangParser.INDEXED_)
                    self.state = 696
                    self.match(RelatioLangParser.BY_)
                    self.state = 697
                    self.index_name()
                    pass
                elif token in [68]:
                    self.state = 698
                    self.match(RelatioLangParser.NOT_)
                    self.state = 699
                    self.match(RelatioLangParser.INDEXED_)
                    pass
                elif token in [-1, 4, 5, 38, 47, 50, 52, 57, 58, 61, 62, 64, 66, 72, 74, 76, 82, 83, 86, 108]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 702
                    self.schema_name()
                    self.state = 703
                    self.match(RelatioLangParser.DOT)


                self.state = 707
                self.table_function_name()
                self.state = 708
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 709
                self.expr(0)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 710
                    self.match(RelatioLangParser.COMMA)
                    self.state = 711
                    self.expr(0)
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 717
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 719
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        self.state = 718
                        self.match(RelatioLangParser.AS_)


                    self.state = 721
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 725
                    self.table_or_subquery()
                    self.state = 730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 726
                        self.match(RelatioLangParser.COMMA)
                        self.state = 727
                        self.table_or_subquery()
                        self.state = 732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 733
                    self.join_clause()
                    pass


                self.state = 736
                self.match(RelatioLangParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 738
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 739
                self.select_stmt()
                self.state = 740
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 742
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 741
                        self.match(RelatioLangParser.AS_)


                    self.state = 744
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(RelatioLangParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(RelatioLangParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(RelatioLangParser.Column_aliasContext,0)


        def AS_(self):
            return self.getToken(RelatioLangParser.AS_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = RelatioLangParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.match(RelatioLangParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.table_name()
                self.state = 751
                self.match(RelatioLangParser.DOT)
                self.state = 752
                self.match(RelatioLangParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.expr(0)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32 or _la==130 or _la==134:
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==32:
                        self.state = 755
                        self.match(RelatioLangParser.AS_)


                    self.state = 758
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(RelatioLangParser.COMMA, 0)

        def JOIN_(self):
            return self.getToken(RelatioLangParser.JOIN_, 0)

        def NATURAL_(self):
            return self.getToken(RelatioLangParser.NATURAL_, 0)

        def INNER_(self):
            return self.getToken(RelatioLangParser.INNER_, 0)

        def CROSS_(self):
            return self.getToken(RelatioLangParser.CROSS_, 0)

        def LEFT_(self):
            return self.getToken(RelatioLangParser.LEFT_, 0)

        def RIGHT_(self):
            return self.getToken(RelatioLangParser.RIGHT_, 0)

        def FULL_(self):
            return self.getToken(RelatioLangParser.FULL_, 0)

        def OUTER_(self):
            return self.getToken(RelatioLangParser.OUTER_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = RelatioLangParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.match(RelatioLangParser.COMMA)
                pass
            elif token in [38, 50, 57, 61, 62, 66, 76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 764
                    self.match(RelatioLangParser.NATURAL_)


                self.state = 773
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50, 62, 76]:
                    self.state = 767
                    _la = self._input.LA(1)
                    if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 67112961) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==75:
                        self.state = 768
                        self.match(RelatioLangParser.OUTER_)


                    pass
                elif token in [57]:
                    self.state = 771
                    self.match(RelatioLangParser.INNER_)
                    pass
                elif token in [38]:
                    self.state = 772
                    self.match(RelatioLangParser.CROSS_)
                    pass
                elif token in [61]:
                    pass
                else:
                    pass
                self.state = 775
                self.match(RelatioLangParser.JOIN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(RelatioLangParser.ON_, 0)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def USING_(self):
            return self.getToken(RelatioLangParser.USING_, 0)

        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = RelatioLangParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(RelatioLangParser.ON_)
                self.state = 779
                self.expr(0)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.match(RelatioLangParser.USING_)
                self.state = 781
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 782
                self.column_name()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 783
                    self.match(RelatioLangParser.COMMA)
                    self.state = 784
                    self.column_name()
                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 790
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION_(self):
            return self.getToken(RelatioLangParser.UNION_, 0)

        def ALL_(self):
            return self.getToken(RelatioLangParser.ALL_, 0)

        def INTERSECT_(self):
            return self.getToken(RelatioLangParser.INTERSECT_, 0)

        def EXCEPT_(self):
            return self.getToken(RelatioLangParser.EXCEPT_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = RelatioLangParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.match(RelatioLangParser.UNION_)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 795
                    self.match(RelatioLangParser.ALL_)


                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(RelatioLangParser.INTERSECT_)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.match(RelatioLangParser.EXCEPT_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = RelatioLangParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 803
            self.column_name()
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 804
                self.match(RelatioLangParser.COMMA)
                self.state = 805
                self.column_name()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 811
            self.match(RelatioLangParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(RelatioLangParser.FILTER_, 0)

        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def WHERE_(self):
            return self.getToken(RelatioLangParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = RelatioLangParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(RelatioLangParser.FILTER_)
            self.state = 814
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 815
            self.match(RelatioLangParser.WHERE_)
            self.state = 816
            self.expr(0)
            self.state = 817
            self.match(RelatioLangParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def ORDER_(self):
            return self.getToken(RelatioLangParser.ORDER_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.BY_)
            else:
                return self.getToken(RelatioLangParser.BY_, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(RelatioLangParser.PARTITION_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = RelatioLangParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 820
                self.base_window_name()


            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 823
                self.match(RelatioLangParser.PARTITION_)
                self.state = 824
                self.match(RelatioLangParser.BY_)
                self.state = 825
                self.expr(0)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 826
                    self.match(RelatioLangParser.COMMA)
                    self.state = 827
                    self.expr(0)
                    self.state = 832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 835
            self.match(RelatioLangParser.ORDER_)
            self.state = 836
            self.match(RelatioLangParser.BY_)
            self.state = 837
            self.ordering_term()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 838
                self.match(RelatioLangParser.COMMA)
                self.state = 839
                self.ordering_term()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 17179873281) != 0):
                self.state = 845
                self.frame_spec()


            self.state = 848
            self.match(RelatioLangParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_(self):
            return self.getToken(RelatioLangParser.OVER_, 0)

        def window_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(RelatioLangParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.BY_)
            else:
                return self.getToken(RelatioLangParser.BY_, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def ORDER_(self):
            return self.getToken(RelatioLangParser.ORDER_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = RelatioLangParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(RelatioLangParser.OVER_)
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 851
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 852
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.base_window_name()


                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 856
                    self.match(RelatioLangParser.PARTITION_)
                    self.state = 857
                    self.match(RelatioLangParser.BY_)
                    self.state = 858
                    self.expr(0)
                    self.state = 863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 859
                        self.match(RelatioLangParser.COMMA)
                        self.state = 860
                        self.expr(0)
                        self.state = 865
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 868
                    self.match(RelatioLangParser.ORDER_)
                    self.state = 869
                    self.match(RelatioLangParser.BY_)
                    self.state = 870
                    self.ordering_term()
                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 871
                        self.match(RelatioLangParser.COMMA)
                        self.state = 872
                        self.ordering_term()
                        self.state = 877
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 17179873281) != 0):
                    self.state = 880
                    self.frame_spec()


                self.state = 883
                self.match(RelatioLangParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_clauseContext,0)


        def EXCLUDE_(self):
            return self.getToken(RelatioLangParser.EXCLUDE_, 0)

        def NO_(self):
            return self.getToken(RelatioLangParser.NO_, 0)

        def OTHERS_(self):
            return self.getToken(RelatioLangParser.OTHERS_, 0)

        def CURRENT_(self):
            return self.getToken(RelatioLangParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RelatioLangParser.ROW_, 0)

        def GROUP_(self):
            return self.getToken(RelatioLangParser.GROUP_, 0)

        def TIES_(self):
            return self.getToken(RelatioLangParser.TIES_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = RelatioLangParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_frame_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.frame_clause()
            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 887
                self.match(RelatioLangParser.EXCLUDE_)
                self.state = 894
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [67]:
                    self.state = 888
                    self.match(RelatioLangParser.NO_)
                    self.state = 889
                    self.match(RelatioLangParser.OTHERS_)
                    pass
                elif token in [94]:
                    self.state = 890
                    self.match(RelatioLangParser.CURRENT_)
                    self.state = 891
                    self.match(RelatioLangParser.ROW_)
                    pass
                elif token in [52]:
                    self.state = 892
                    self.match(RelatioLangParser.GROUP_)
                    pass
                elif token in [115]:
                    self.state = 893
                    self.match(RelatioLangParser.TIES_)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE_(self):
            return self.getToken(RelatioLangParser.RANGE_, 0)

        def ROWS_(self):
            return self.getToken(RelatioLangParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(RelatioLangParser.GROUPS_, 0)

        def frame_single(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_singleContext,0)


        def BETWEEN_(self):
            return self.getToken(RelatioLangParser.BETWEEN_, 0)

        def frame_left(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_leftContext,0)


        def AND_(self):
            return self.getToken(RelatioLangParser.AND_, 0)

        def frame_right(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = RelatioLangParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 17179873281) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 899
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 900
                self.match(RelatioLangParser.BETWEEN_)
                self.state = 901
                self.frame_left()
                self.state = 902
                self.match(RelatioLangParser.AND_)
                self.state = 903
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(RelatioLangParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def STAR(self):
            return self.getToken(RelatioLangParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = RelatioLangParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.simple_func()
            self.state = 908
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135]:
                self.state = 909
                self.expr(0)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 910
                    self.match(RelatioLangParser.COMMA)
                    self.state = 911
                    self.expr(0)
                    self.state = 916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 917
                self.match(RelatioLangParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 920
            self.match(RelatioLangParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(RelatioLangParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def STAR(self):
            return self.getToken(RelatioLangParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Filter_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(RelatioLangParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = RelatioLangParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.aggregate_func()
            self.state = 923
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135]:
                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.match(RelatioLangParser.DISTINCT_)


                self.state = 927
                self.expr(0)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 928
                    self.match(RelatioLangParser.COMMA)
                    self.state = 929
                    self.expr(0)
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 935
                self.match(RelatioLangParser.STAR)
                pass
            elif token in [4]:
                pass
            else:
                pass
            self.state = 938
            self.match(RelatioLangParser.CLOSE_PAR)
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 939
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(RelatioLangParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def OVER_(self):
            return self.getToken(RelatioLangParser.OVER_, 0)

        def window_defn(self):
            return self.getTypedRuleContext(RelatioLangParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Window_nameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def STAR(self):
            return self.getToken(RelatioLangParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Filter_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = RelatioLangParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.window_function()
            self.state = 943
            self.match(RelatioLangParser.OPEN_PAR)
            self.state = 953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135]:
                self.state = 944
                self.expr(0)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 945
                    self.match(RelatioLangParser.COMMA)
                    self.state = 946
                    self.expr(0)
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 952
                self.match(RelatioLangParser.STAR)
                pass
            elif token in [4]:
                pass
            else:
                pass
            self.state = 955
            self.match(RelatioLangParser.CLOSE_PAR)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 956
                self.filter_clause()


            self.state = 959
            self.match(RelatioLangParser.OVER_)
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 960
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 961
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(RelatioLangParser.WITH_, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Common_table_expressionContext,i)


        def RECURSIVE_(self):
            return self.getToken(RelatioLangParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = RelatioLangParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(RelatioLangParser.WITH_)
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 965
                self.match(RelatioLangParser.RECURSIVE_)


            self.state = 968
            self.common_table_expression()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 969
                self.match(RelatioLangParser.COMMA)
                self.state = 970
                self.common_table_expression()
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(RelatioLangParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = RelatioLangParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(RelatioLangParser.ORDER_)
            self.state = 977
            self.match(RelatioLangParser.BY_)
            self.state = 978
            self.ordering_term()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 979
                self.match(RelatioLangParser.COMMA)
                self.state = 980
                self.ordering_term()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(RelatioLangParser.LIMIT_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def OFFSET_(self):
            return self.getToken(RelatioLangParser.OFFSET_, 0)

        def COMMA(self):
            return self.getToken(RelatioLangParser.COMMA, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = RelatioLangParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(RelatioLangParser.LIMIT_)
            self.state = 987
            self.expr(0)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==71:
                self.state = 988
                _la = self._input.LA(1)
                if not(_la==5 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 989
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(RelatioLangParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(RelatioLangParser.Asc_descContext,0)


        def NULLS_(self):
            return self.getToken(RelatioLangParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(RelatioLangParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(RelatioLangParser.LAST_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = RelatioLangParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.expr(0)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 993
                self.match(RelatioLangParser.COLLATE_)
                self.state = 994
                self.collation_name()


            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33 or _la==42:
                self.state = 997
                self.asc_desc()


            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1000
                self.match(RelatioLangParser.NULLS_)
                self.state = 1001
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_(self):
            return self.getToken(RelatioLangParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(RelatioLangParser.DESC_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = RelatioLangParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if not(_la==33 or _la==42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(RelatioLangParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(RelatioLangParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(RelatioLangParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RelatioLangParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RelatioLangParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = RelatioLangParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_frame_left)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.expr(0)
                self.state = 1007
                self.match(RelatioLangParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.expr(0)
                self.state = 1010
                self.match(RelatioLangParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.match(RelatioLangParser.CURRENT_)
                self.state = 1013
                self.match(RelatioLangParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1014
                self.match(RelatioLangParser.UNBOUNDED_)
                self.state = 1015
                self.match(RelatioLangParser.PRECEDING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(RelatioLangParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(RelatioLangParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(RelatioLangParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RelatioLangParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RelatioLangParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = RelatioLangParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_frame_right)
        try:
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1018
                self.expr(0)
                self.state = 1019
                self.match(RelatioLangParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.expr(0)
                self.state = 1022
                self.match(RelatioLangParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1024
                self.match(RelatioLangParser.CURRENT_)
                self.state = 1025
                self.match(RelatioLangParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1026
                self.match(RelatioLangParser.UNBOUNDED_)
                self.state = 1027
                self.match(RelatioLangParser.FOLLOWING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(RelatioLangParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RelatioLangParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(RelatioLangParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(RelatioLangParser.ROW_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = RelatioLangParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_frame_single)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1030
                self.expr(0)
                self.state = 1031
                self.match(RelatioLangParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.match(RelatioLangParser.UNBOUNDED_)
                self.state = 1034
                self.match(RelatioLangParser.PRECEDING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(RelatioLangParser.CURRENT_)
                self.state = 1036
                self.match(RelatioLangParser.ROW_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.OPEN_PAR)
            else:
                return self.getToken(RelatioLangParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(RelatioLangParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.CLOSE_PAR)
            else:
                return self.getToken(RelatioLangParser.CLOSE_PAR, i)

        def OVER_(self):
            return self.getToken(RelatioLangParser.OVER_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(RelatioLangParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE_(self):
            return self.getToken(RelatioLangParser.FIRST_VALUE_, 0)

        def LAST_VALUE_(self):
            return self.getToken(RelatioLangParser.LAST_VALUE_, 0)

        def partition_by(self):
            return self.getTypedRuleContext(RelatioLangParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(RelatioLangParser.Frame_clauseContext,0)


        def CUME_DIST_(self):
            return self.getToken(RelatioLangParser.CUME_DIST_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(RelatioLangParser.PERCENT_RANK_, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(RelatioLangParser.Order_by_exprContext,0)


        def DENSE_RANK_(self):
            return self.getToken(RelatioLangParser.DENSE_RANK_, 0)

        def RANK_(self):
            return self.getToken(RelatioLangParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(RelatioLangParser.ROW_NUMBER_, 0)

        def LAG_(self):
            return self.getToken(RelatioLangParser.LAG_, 0)

        def LEAD_(self):
            return self.getToken(RelatioLangParser.LEAD_, 0)

        def offset(self):
            return self.getTypedRuleContext(RelatioLangParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(RelatioLangParser.Default_valueContext,0)


        def NTH_VALUE_(self):
            return self.getToken(RelatioLangParser.NTH_VALUE_, 0)

        def COMMA(self):
            return self.getToken(RelatioLangParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RelatioLangParser.Signed_numberContext,0)


        def NTILE_(self):
            return self.getToken(RelatioLangParser.NTILE_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = RelatioLangParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88, 99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                _la = self._input.LA(1)
                if not(_la==88 or _la==99):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1040
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1041
                self.expr(0)
                self.state = 1042
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 1043
                self.match(RelatioLangParser.OVER_)
                self.state = 1044
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1045
                    self.partition_by()


                self.state = 1048
                self.order_by_expr_asc_desc()
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 17179873281) != 0):
                    self.state = 1049
                    self.frame_clause()


                self.state = 1052
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            elif token in [96, 103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                _la = self._input.LA(1)
                if not(_la==96 or _la==103):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1055
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1056
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 1057
                self.match(RelatioLangParser.OVER_)
                self.state = 1058
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1059
                    self.partition_by()


                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 1062
                    self.order_by_expr()


                self.state = 1065
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            elif token in [97, 104, 105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                _la = self._input.LA(1)
                if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 385) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1067
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1068
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 1069
                self.match(RelatioLangParser.OVER_)
                self.state = 1070
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1071
                    self.partition_by()


                self.state = 1074
                self.order_by_expr_asc_desc()
                self.state = 1075
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            elif token in [98, 100]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1077
                _la = self._input.LA(1)
                if not(_la==98 or _la==100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1078
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1079
                self.expr(0)
                self.state = 1081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1080
                    self.offset()


                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1083
                    self.default_value()


                self.state = 1086
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 1087
                self.match(RelatioLangParser.OVER_)
                self.state = 1088
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1089
                    self.partition_by()


                self.state = 1092
                self.order_by_expr_asc_desc()
                self.state = 1093
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1095
                self.match(RelatioLangParser.NTH_VALUE_)
                self.state = 1096
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1097
                self.expr(0)
                self.state = 1098
                self.match(RelatioLangParser.COMMA)
                self.state = 1099
                self.signed_number()
                self.state = 1100
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 1101
                self.match(RelatioLangParser.OVER_)
                self.state = 1102
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1103
                    self.partition_by()


                self.state = 1106
                self.order_by_expr_asc_desc()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 17179873281) != 0):
                    self.state = 1107
                    self.frame_clause()


                self.state = 1110
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1112
                self.match(RelatioLangParser.NTILE_)
                self.state = 1113
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1114
                self.expr(0)
                self.state = 1115
                self.match(RelatioLangParser.CLOSE_PAR)
                self.state = 1116
                self.match(RelatioLangParser.OVER_)
                self.state = 1117
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1118
                    self.partition_by()


                self.state = 1121
                self.order_by_expr_asc_desc()
                self.state = 1122
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(RelatioLangParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RelatioLangParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = RelatioLangParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.match(RelatioLangParser.COMMA)
            self.state = 1127
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(RelatioLangParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(RelatioLangParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = RelatioLangParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(RelatioLangParser.COMMA)
            self.state = 1130
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_(self):
            return self.getToken(RelatioLangParser.PARTITION_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = RelatioLangParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(RelatioLangParser.PARTITION_)
            self.state = 1133
            self.match(RelatioLangParser.BY_)
            self.state = 1135 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1134
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1137 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(RelatioLangParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = RelatioLangParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(RelatioLangParser.ORDER_)
            self.state = 1140
            self.match(RelatioLangParser.BY_)
            self.state = 1142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1141
                self.expr(0)
                self.state = 1144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -1073740024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1159676904047902721) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 255) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(RelatioLangParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def expr_asc_desc(self):
            return self.getTypedRuleContext(RelatioLangParser.Expr_asc_descContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = RelatioLangParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(RelatioLangParser.ORDER_)
            self.state = 1147
            self.match(RelatioLangParser.BY_)
            self.state = 1148
            self.expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.ExprContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = RelatioLangParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.expr(0)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33 or _la==42:
                self.state = 1151
                self.asc_desc()


            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1154
                self.match(RelatioLangParser.COMMA)
                self.state = 1155
                self.expr(0)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==42:
                    self.state = 1156
                    self.asc_desc()


                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(RelatioLangParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(RelatioLangParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(RelatioLangParser.TILDE, 0)

        def NOT_(self):
            return self.getToken(RelatioLangParser.NOT_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = RelatioLangParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            _la = self._input.LA(1)
            if not(((((_la - 8)) & ~0x3f) == 0 and ((1 << (_la - 8)) & 1152921504606846983) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(RelatioLangParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(RelatioLangParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = RelatioLangParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            _la = self._input.LA(1)
            if not(_la==130 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def literal_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Literal_valueContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Literal_valueContext,i)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = RelatioLangParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.function_name()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1169
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1170
                self.literal_value()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1171
                    self.match(RelatioLangParser.COMMA)
                    self.state = 1172
                    self.literal_value()
                    self.state = 1177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1178
                self.match(RelatioLangParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_of_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CUR(self):
            return self.getToken(RelatioLangParser.OPEN_CUR, 0)

        def literal_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RelatioLangParser.Literal_valueContext)
            else:
                return self.getTypedRuleContext(RelatioLangParser.Literal_valueContext,i)


        def CLOSE_CUR(self):
            return self.getToken(RelatioLangParser.CLOSE_CUR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.COMMA)
            else:
                return self.getToken(RelatioLangParser.COMMA, i)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_set_of_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_of_values" ):
                listener.enterSet_of_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_of_values" ):
                listener.exitSet_of_values(self)




    def set_of_values(self):

        localctx = RelatioLangParser.Set_of_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_set_of_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(RelatioLangParser.OPEN_CUR)
            self.state = 1183
            self.literal_value()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1184
                self.match(RelatioLangParser.COMMA)
                self.state = 1185
                self.literal_value()
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1191
            self.match(RelatioLangParser.CLOSE_CUR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_of_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQR(self):
            return self.getToken(RelatioLangParser.OPEN_SQR, 0)

        def INTEGER_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RelatioLangParser.INTEGER_LITERAL)
            else:
                return self.getToken(RelatioLangParser.INTEGER_LITERAL, i)

        def COLON(self):
            return self.getToken(RelatioLangParser.COLON, 0)

        def CLOSE_SQR(self):
            return self.getToken(RelatioLangParser.CLOSE_SQR, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_range_of_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_of_values" ):
                listener.enterRange_of_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_of_values" ):
                listener.exitRange_of_values(self)




    def range_of_values(self):

        localctx = RelatioLangParser.Range_of_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_range_of_values)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(RelatioLangParser.OPEN_SQR)
            self.state = 1194
            self.match(RelatioLangParser.INTEGER_LITERAL)
            self.state = 1195
            self.match(RelatioLangParser.COLON)
            self.state = 1196
            self.match(RelatioLangParser.INTEGER_LITERAL)
            self.state = 1197
            self.match(RelatioLangParser.CLOSE_SQR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_(self):
            return self.getToken(RelatioLangParser.ALL_, 0)

        def AND_(self):
            return self.getToken(RelatioLangParser.AND_, 0)

        def AS_(self):
            return self.getToken(RelatioLangParser.AS_, 0)

        def ASC_(self):
            return self.getToken(RelatioLangParser.ASC_, 0)

        def BETWEEN_(self):
            return self.getToken(RelatioLangParser.BETWEEN_, 0)

        def BY_(self):
            return self.getToken(RelatioLangParser.BY_, 0)

        def CASE_(self):
            return self.getToken(RelatioLangParser.CASE_, 0)

        def COLLATE_(self):
            return self.getToken(RelatioLangParser.COLLATE_, 0)

        def CROSS_(self):
            return self.getToken(RelatioLangParser.CROSS_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(RelatioLangParser.CURRENT_DATE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(RelatioLangParser.CURRENT_TIME_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(RelatioLangParser.CURRENT_TIMESTAMP_, 0)

        def DESC_(self):
            return self.getToken(RelatioLangParser.DESC_, 0)

        def DISTINCT_(self):
            return self.getToken(RelatioLangParser.DISTINCT_, 0)

        def ELSE_(self):
            return self.getToken(RelatioLangParser.ELSE_, 0)

        def END_(self):
            return self.getToken(RelatioLangParser.END_, 0)

        def ESCAPE_(self):
            return self.getToken(RelatioLangParser.ESCAPE_, 0)

        def EXCEPT_(self):
            return self.getToken(RelatioLangParser.EXCEPT_, 0)

        def EXISTS_(self):
            return self.getToken(RelatioLangParser.EXISTS_, 0)

        def FROM_(self):
            return self.getToken(RelatioLangParser.FROM_, 0)

        def FULL_(self):
            return self.getToken(RelatioLangParser.FULL_, 0)

        def GLOB_(self):
            return self.getToken(RelatioLangParser.GLOB_, 0)

        def GROUP_(self):
            return self.getToken(RelatioLangParser.GROUP_, 0)

        def HAVING_(self):
            return self.getToken(RelatioLangParser.HAVING_, 0)

        def IF_(self):
            return self.getToken(RelatioLangParser.IF_, 0)

        def IN_(self):
            return self.getToken(RelatioLangParser.IN_, 0)

        def INDEXED_(self):
            return self.getToken(RelatioLangParser.INDEXED_, 0)

        def INNER_(self):
            return self.getToken(RelatioLangParser.INNER_, 0)

        def INTERSECT_(self):
            return self.getToken(RelatioLangParser.INTERSECT_, 0)

        def IS_(self):
            return self.getToken(RelatioLangParser.IS_, 0)

        def ISNULL_(self):
            return self.getToken(RelatioLangParser.ISNULL_, 0)

        def JOIN_(self):
            return self.getToken(RelatioLangParser.JOIN_, 0)

        def LEFT_(self):
            return self.getToken(RelatioLangParser.LEFT_, 0)

        def LIKE_(self):
            return self.getToken(RelatioLangParser.LIKE_, 0)

        def LIMIT_(self):
            return self.getToken(RelatioLangParser.LIMIT_, 0)

        def MATCH_(self):
            return self.getToken(RelatioLangParser.MATCH_, 0)

        def NATURAL_(self):
            return self.getToken(RelatioLangParser.NATURAL_, 0)

        def NO_(self):
            return self.getToken(RelatioLangParser.NO_, 0)

        def NOT_(self):
            return self.getToken(RelatioLangParser.NOT_, 0)

        def NOTNULL_(self):
            return self.getToken(RelatioLangParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(RelatioLangParser.NULL_, 0)

        def OFFSET_(self):
            return self.getToken(RelatioLangParser.OFFSET_, 0)

        def ON_(self):
            return self.getToken(RelatioLangParser.ON_, 0)

        def OR_(self):
            return self.getToken(RelatioLangParser.OR_, 0)

        def ORDER_(self):
            return self.getToken(RelatioLangParser.ORDER_, 0)

        def OUTER_(self):
            return self.getToken(RelatioLangParser.OUTER_, 0)

        def RECURSIVE_(self):
            return self.getToken(RelatioLangParser.RECURSIVE_, 0)

        def RIGHT_(self):
            return self.getToken(RelatioLangParser.RIGHT_, 0)

        def ROW_(self):
            return self.getToken(RelatioLangParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(RelatioLangParser.ROWS_, 0)

        def SELECT_(self):
            return self.getToken(RelatioLangParser.SELECT_, 0)

        def THEN_(self):
            return self.getToken(RelatioLangParser.THEN_, 0)

        def UNION_(self):
            return self.getToken(RelatioLangParser.UNION_, 0)

        def USING_(self):
            return self.getToken(RelatioLangParser.USING_, 0)

        def VALUES_(self):
            return self.getToken(RelatioLangParser.VALUES_, 0)

        def WHEN_(self):
            return self.getToken(RelatioLangParser.WHEN_, 0)

        def WHERE_(self):
            return self.getToken(RelatioLangParser.WHERE_, 0)

        def WITH_(self):
            return self.getToken(RelatioLangParser.WITH_, 0)

        def FIRST_VALUE_(self):
            return self.getToken(RelatioLangParser.FIRST_VALUE_, 0)

        def OVER_(self):
            return self.getToken(RelatioLangParser.OVER_, 0)

        def PARTITION_(self):
            return self.getToken(RelatioLangParser.PARTITION_, 0)

        def RANGE_(self):
            return self.getToken(RelatioLangParser.RANGE_, 0)

        def PRECEDING_(self):
            return self.getToken(RelatioLangParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(RelatioLangParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(RelatioLangParser.CURRENT_, 0)

        def FOLLOWING_(self):
            return self.getToken(RelatioLangParser.FOLLOWING_, 0)

        def CUME_DIST_(self):
            return self.getToken(RelatioLangParser.CUME_DIST_, 0)

        def DENSE_RANK_(self):
            return self.getToken(RelatioLangParser.DENSE_RANK_, 0)

        def LAG_(self):
            return self.getToken(RelatioLangParser.LAG_, 0)

        def LAST_VALUE_(self):
            return self.getToken(RelatioLangParser.LAST_VALUE_, 0)

        def LEAD_(self):
            return self.getToken(RelatioLangParser.LEAD_, 0)

        def NTH_VALUE_(self):
            return self.getToken(RelatioLangParser.NTH_VALUE_, 0)

        def NTILE_(self):
            return self.getToken(RelatioLangParser.NTILE_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(RelatioLangParser.PERCENT_RANK_, 0)

        def RANK_(self):
            return self.getToken(RelatioLangParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(RelatioLangParser.ROW_NUMBER_, 0)

        def TRUE_(self):
            return self.getToken(RelatioLangParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(RelatioLangParser.FALSE_, 0)

        def WINDOW_(self):
            return self.getToken(RelatioLangParser.WINDOW_, 0)

        def NULLS_(self):
            return self.getToken(RelatioLangParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(RelatioLangParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(RelatioLangParser.LAST_, 0)

        def FILTER_(self):
            return self.getToken(RelatioLangParser.FILTER_, 0)

        def GROUPS_(self):
            return self.getToken(RelatioLangParser.GROUPS_, 0)

        def EXCLUDE_(self):
            return self.getToken(RelatioLangParser.EXCLUDE_, 0)

        def GRAPH_(self):
            return self.getToken(RelatioLangParser.GRAPH_, 0)

        def SOURCE_(self):
            return self.getToken(RelatioLangParser.SOURCE_, 0)

        def INCLUDE_(self):
            return self.getToken(RelatioLangParser.INCLUDE_, 0)

        def EDGE_(self):
            return self.getToken(RelatioLangParser.EDGE_, 0)

        def EXIT_(self):
            return self.getToken(RelatioLangParser.EXIT_, 0)

        def ENTER_(self):
            return self.getToken(RelatioLangParser.ENTER_, 0)

        def VISITS_(self):
            return self.getToken(RelatioLangParser.VISITS_, 0)

        def DISTANCE_(self):
            return self.getToken(RelatioLangParser.DISTANCE_, 0)

        def TRANSFORMER_(self):
            return self.getToken(RelatioLangParser.TRANSFORMER_, 0)

        def SET_(self):
            return self.getToken(RelatioLangParser.SET_, 0)

        def GENERATION_(self):
            return self.getToken(RelatioLangParser.GENERATION_, 0)

        def AMOUNT_(self):
            return self.getToken(RelatioLangParser.AMOUNT_, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = RelatioLangParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            _la = self._input.LA(1)
            if not(((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & -1) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 67639443455) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = RelatioLangParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = RelatioLangParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = RelatioLangParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = RelatioLangParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = RelatioLangParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = RelatioLangParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = RelatioLangParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = RelatioLangParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = RelatioLangParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = RelatioLangParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = RelatioLangParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = RelatioLangParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = RelatioLangParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = RelatioLangParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = RelatioLangParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def getRuleIndex(self):
            return RelatioLangParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = RelatioLangParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(RelatioLangParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(RelatioLangParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(RelatioLangParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(RelatioLangParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(RelatioLangParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(RelatioLangParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return RelatioLangParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = RelatioLangParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_any_name)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                self.match(RelatioLangParser.IDENTIFIER)
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.keyword()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1235
                self.match(RelatioLangParser.STRING_LITERAL)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1236
                self.match(RelatioLangParser.OPEN_PAR)
                self.state = 1237
                self.any_name()
                self.state = 1238
                self.match(RelatioLangParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         




